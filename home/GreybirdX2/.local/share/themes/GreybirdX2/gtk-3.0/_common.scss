@function gtkalpha($c,$a) {
  @return unquote("alpha(#{$c},#{$a})");
}
@function -px($value) {
  @return ($value*1.7) + px;
}

$ease-out-quad: cubic-bezier(0.25, 0.46, 0.45, 0.94);
$asset_suffix: if($variant=='dark', '-dark', '');
$backdrop_transition: 200ms ease-out;
$button_transition: all 200ms $ease-out-quad;

* {
  padding: 0;
  -GtkToolButton-icon-spacing: 4;
  -GtkTextView-error-underline-color: $error_color;

  // The size for scrollbars. The slider is -px(2) smaller, but we keep it
  // up so that the whole area is sensitive to button presses for the
  // slider. The stepper button is larger in both directions, the slider
  // only in the width

  -GtkScrolledWindow-scrollbar-spacing: 0;

  -GtkToolItemGroup-expander-size: 11;

  -GtkWidget-text-handle-width: 20;
  -GtkWidget-text-handle-height: 24;

  -GtkDialog-button-spacing: 4;
  -GtkDialog-action-area-border: 0;

  // We use the outline properties to signal the focus properties
  // to the adwaita engine: using real CSS properties is faster,
  // and we don't use any outlines for now.

  outline-color: transparentize($fg_color, 0.7);
  outline-style: dashed;
  outline-offset: -px(-3);
  outline-width: -px(1);
  -gtk-outline-radius: -px(2);
  -gtk-secondary-caret-color: $selected_bg_color
}


/***************
 * Base States *
 ***************/
.background {
  color: $fg_color;
  background-color: $bg_color;

  &:backdrop {
    color: $backdrop_fg_color;
    background-color: $backdrop_bg_color;
    text-shadow: none;
    -gtk-icon-shadow: none;
  }
}

/*
   These wildcard seems unavoidable, need to investigate.
   Wildcards are bad and troublesome, use them with care,
   or better, just don't.
   Everytime a wildcard is used a kitten dies, painfully.
*/

*:disabled { -gtk-icon-effect: dim; }

.gtkstyle-fallback {
  color: $fg_color;
  background-color: $bg_color;
  text-shadow: none;

  &:hover {
    color: $fg_color;
    background-color: lighten($bg_color, 10%);
  }

  &:active {
    color: $fg_color;
    background-color: darken($bg_color, 10%);
  }

  &:disabled {
    color: $insensitive_fg_color;
    background-color: $insensitive_bg_color;
  }

  &:selected {
    color: $selected_fg_color;
    background-color: $selected_bg_color;
  }
}

.view,
%view {
  color: $text_color;
  background-color: $base_color;

  &:backdrop {
    color: $backdrop_text_color;
    background-color: $backdrop_base_color;
  }

  &:selected {
    &:focus, & {
      @extend %selected_items;

      border-radius: -px(3);
    }
  }
}

.view,
textview {
  text {
    @extend %view;

    selection { &:focus, & { @extend %selected_items; }}
  }
}

textview border { background-color: mix($bg_color, $base_color, 50%); }

iconview { @extend .view; }

.rubberband,
rubberband {
  border: -px(1) solid darken($selected_bg_color, 10%);
  background-color: transparentize(darken($selected_bg_color, 10%), 0.8);
}

flowbox {
  rubberband { @extend rubberband; }

  flowboxchild {
    padding: -px(3);
    border-radius: -px(3);

    &:selected {
      @extend %selected_items;

      outline-offset: -px(-2);
    }
  }
}

label {
  &.separator {
    @extend .dim-label;

    color: $fg_color;

    &:backdrop { color: $backdrop_fg_color; }
  }

  row:selected &,
  &:selected { @extend %nobg_selected_items; }

  selection {
    background-color: $selected_bg_color;
    color: $selected_fg_color;
  }

  &:disabled {
    color: $insensitive_fg_color;

    selection { @extend %selected_items:disabled; }

    &:backdrop { color: $backdrop_insensitive_color; }
  }

  &:backdrop {
    color: $backdrop_fg_color;

    selection { @extend %selected_items:backdrop; }
  }
}

.dim-label {
  opacity: 0.55;
  text-shadow: none;
}

assistant {
  .sidebar {
    background-color: $base_color;
    border-top: -px(1) solid $borders_color;

    &:backdrop {
      background-color: $backdrop_base_color;
      border-color: $backdrop_borders_color;
    }
  }

  &.csd .sidebar { border-top-style: none; }

  .sidebar label { padding: -px(6) -px(12); }

  .sidebar label.highlight { background-color: mix($bg_color, $fg_color, 80%); }
}

%osd, .osd {
  color: $osd_fg_color;
  border: none;
  background-color: $osd_bg_color;
  background-clip: padding-box;
  outline-color: transparentize($osd_fg_color, 0.7);
  text-shadow: 0 -px(1) black;
  -gtk-icon-shadow: 0 -px(1) black;

  &:backdrop {
    color: shade($osd_fg_color, 1.2);
    background-color: shade($osd_bg_color, 1.6);
    text-shadow: none;
    -gtk-icon-shadow: none;
  }
}


/*********************
 * Spinner Animation *
 *********************/
@keyframes spin {
  to { -gtk-icon-transform: rotate(1turn); }
}

spinner {
  background: none;
  opacity: 0; // non spinning spinner makes no sense
  -gtk-icon-source: -gtk-icontheme('process-working-symbolic');

  &:checked {
    opacity: 1;
    animation: spin 1s linear infinite;

    &:disabled { opacity: 0.5; }
  }
}


/****************
 * Text Entries *
 ****************/

%entry,
entry {
  %entry_basic, & {
    min-height: -px(28);
    padding-left: -px(4);
    padding-right: -px(4);
    border: -px(1) solid;
    border-radius: -px(3);
    transition: all 200ms $ease-out-quad;

    @include entry(normal);

    image { // icons inside the entry
      &.left { margin-right: -px(6); }
      &.right { margin-left: -px(6); }
    }

    undershoot {
      &.left { @include undershoot(left); }
      &.right { @include undershoot(right); }
    }

    &.flat {
      &:focus, & {
        min-height: 0;
        padding: -px(2);
        background-color: transparent;
        border-color: transparent;
        border-radius: 0;
      }
    }

    &:focus { @include entry(focus); }

    &:disabled { @include entry(insensitive); }

    &:backdrop {
      @include entry(backdrop);

      transition: $backdrop_transition;
    }

    &:backdrop:disabled { @include entry(backdrop-insensitive); }

    selection { &:focus, & { @extend %selected_items; }}

    // entry error and warning style
    @each $e_type, $e_color in (error, $error_color),
                               (warning, $warning_color) {
      &.#{$e_type} {
        background-color: transparentize($e_color, 0.9);
        color: $e_color;
        text-shadow: none;
        border-color: entry_focus_border($e_color);

        &:focus { @include entry(focus, $e_color); }

        selection { background-color: $e_color; }
      }
    }

    image { // entry icons colors
      color: mix($fg_color, $base_color, 80%);

      &:hover { color: $fg_color; }

      &:active { color: $selected_bg_color; }

      &:backdrop { color: mix($backdrop_fg_color, $backdrop_base_color, 80%); }
    }

    &:drop(active) {
      &:focus, & {
        border-color: $drop_target_color;
        box-shadow: inset 0 0 0 -px(1) $drop_target_color;
      }
    }

    .osd & {
      @include entry(osd);

      &:focus { @include entry(osd-focus); }

      &:backdrop { @include entry(osd-backdrop); }

      &:disabled { @include entry(osd-insensitive); }
    }
  }

  progress {
    margin: -px(2) -px(-6);
    background-color: transparent;
    background-image: none;
    border-radius: 0;
    border-width: 0 0 -px(2);
    border-color: $selected_bg_color;
    border-style: solid;
    box-shadow: none;

    &:backdrop { background-color: transparent; }
  }

   // linked entries
  .linked:not(.vertical) > & { @extend %linked; }
  .linked:not(.vertical) > &:focus + &,
  .linked:not(.vertical) > &:focus + button,
  .linked:not(.vertical) > &:focus + combobox > box > button.combo { border-left-color: entry_focus_border(); }

  .linked:not(.vertical) > &:drop(active) + &,
  .linked:not(.vertical) > &:drop(active) + button,
  .linked:not(.vertical) > &:drop(active) + combobox > box > button.combo { border-left-color: $drop_target_color; }

  // Vertically linked entries
  // FIXME: take care of "colored" entries
  .linked.vertical > & {
    @extend %linked_vertical;

    // brighter border between linked entries
    &:not(:disabled) + entry:not(:disabled),
    &:not(:disabled) + %entry:not(:disabled) {
      border-top-color: mix($borders_color, $base_color, 30%);
      background-color: $base_color;

      &:backdrop {
        border-top-color: mix($backdrop_borders_color, $backdrop_base_color, 30%);
        background-color: $backdrop_base_color;
      }
    }

    // brighter border between linked insensitive entries
    &:disabled + %entry:disabled,
    &:disabled + entry:disabled { border-top-color: mix($borders_color, $base_color, 30%); }

    // color back the top border of a linked focused entry following another entry and add back the focus shadow.
    // :not(:only-child) is a specificity bump hack.
    + %entry:focus:not(:only-child),
    + entry:focus:not(:only-child) { border-top-color: entry_focus_border(); }

    + %entry:drop(active):not(:only-child),
    + entry:drop(active):not(:only-child) { border-top-color: $drop_target_color; }

    // this takes care of coloring the top border of the focused entry subsequent widget.
    // :not(:only-child) is a specificity bump hack.
    &:focus:not(:only-child) {
      + %entry,
      + entry,
      + button,
      + combobox > box > button.combo { border-top-color: entry_focus_border(); }
    }

    &:drop(active):not(:only-child) {
      + %entry,
      + entry,
      + button,
      + combobox > box > button.combo { border-top-color: $drop_target_color; }
    }
  }
}

treeview entry {
  &:focus {
    &:dir(rtl), &:dir(ltr) { // specificity bump hack
      background-color: $base_color;
      transition-property: color, background;
    }
  }

  &.flat, & {
    border-radius: 0;
    background-image: none;
    background-color: $base_color;

    &:focus { border-color: $selected_bg_color; }
  }
}


/***********
 * Buttons *
 ***********/
// stuff for .needs-attention
$_dot_color: if($variant=='light', $selected_bg_color,
                                   lighten($selected_bg_color,15%));
@keyframes needs_attention {
  from {
    background-image: -gtk-gradient(radial,
                                    center center, 0,
                                    center center, 0.01,
                                    to($_dot_color),
                                    to(transparent));
  }

  to {
    background-image: -gtk-gradient(radial,
                                    center center, 0,
                                    center center, 0.5,
                                    to($selected_bg_color),
                                    to(transparent));
  }
}

%button,
button {
  @at-root %button_basic, & {

    min-height: -px(24);
    min-width: -px(22);
    padding: -px(1) -px(2);
    border: -px(1) solid;
    border-radius: -px(3);
    transition: $button_transition;

    @include button(normal);

    &.flat {
      @include button(undecorated);
      // to avoid adiacent buttons borders clashing when transitioning, the transition on the normal state is set
      // to none, while it's added back in the hover state, so the button decoration will fade in on hover, but
      // it won't fade out when the pointer leave the button allocation area. To make the transition more evident
      // in this case the duration is increased.
      transition: none;

      &:hover {
        transition: $button_transition;
        transition-duration: 500ms;

        &:active { transition: $button_transition; }
      }
    }

    &:hover {
      @include button(hover);
      -gtk-icon-effect: highlight;
    }

    &:active,
    &:checked {
      @include button(active);

      transition-duration: 50ms;
    }

    &:backdrop {
      &.flat, & {
        @include button(backdrop);

        transition: $backdrop_transition;
        -gtk-icon-effect: none;

        &:active,
        &:checked { @include button(backdrop-active); }

        &:disabled {
          @include button(backdrop-insensitive);

          &:active,
          &:checked { @include button(backdrop-insensitive-active); }
        }
      }
    }

    &.flat { &:backdrop, &:disabled, &:backdrop:disabled { @include button(undecorated); }}

    &:disabled {
      @include button(insensitive);

      &:active,
      &:checked { @include button(insensitive-active); }
    }

    &.image-button {
      min-height: -px(20);
      min-width: -px(20);
      padding: -px(2);
    }

    &.text-button {
      padding-left: -px(8);
      padding-right: -px(8);
    }

    &.text-button.image-button {
      padding-left: -px(4);
      padding-right: -px(4);

      label {
        padding-left: -px(4);
        padding-right: -px(4);
      }
    }

    &:drop(active) {
      color: $drop_target_color;
      border-color: $drop_target_color;
      box-shadow: inset 0 0 0 -px(1) $drop_target_color;
    }
  }

  @at-root %button_selected, & {
    row:selected & {
      @if $variant == 'light' { border-color: $selected_borders_color; }

      &.flat:not(:active):not(:checked):not(:hover):not(disabled) {
        color: $selected_fg_color;
        border-color: transparent;

        &:backdrop { color: if($variant=='light', $backdrop_base_color, $backdrop_fg_color); }
      }
    }
  }


  // big standalone buttons like in Documents pager
  &.osd {
    min-width: -px(24);
    min-height: -px(32);

    &.image-button { min-width: -px(32); }

    color: $osd_fg_color;
    border-radius: -px(5);
    outline-color: transparentize($osd_fg_color, 0.7);  //FIXME: define a color var?

    @include button(osd);

    border: none;
    box-shadow: none;

    &:hover {
      @include button(osd-hover);

      border: none;
      box-shadow: none;
    }

    &:active,
    &:checked {
      @include button(osd-active);

      border: none;
      box-shadow: none;
    }

    &:disabled {
      &:backdrop, & {
        @include button(osd-insensitive);

        border: none;
      }
    }

    &:backdrop {
      @include button(osd-backdrop);

      border: none;
    }
  }

  //overlay / OSD style
  @at-root %osd_button,
  .osd & {
    @include button(osd);

    &:hover { @include button(osd-hover); }

    &:active,
    &:checked { &:backdrop, & { @include button(osd-active); }}

    &:disabled { &:backdrop, & { @include button(osd-insensitive); }}

    &:backdrop { @include button(osd-backdrop); }

    &.flat {
      @include button(undecorated);

      box-shadow: none; //FIXME respect no edge on the button mixin
      text-shadow: 0 -px(1) black;
      -gtk-icon-shadow: 0 -px(1) black;

      &:hover { @include button(osd-hover); }

      &:disabled {
        @include button(osd-insensitive);
        background-image: none;
        border-color: transparent;
        box-shadow: none;
      }

      &:backdrop { @include button(undecorated); }

      &:active,
      &:checked { @include button(osd-active); }
    }
  }

  // Suggested and Destructive Action buttons
  @each $b_type, $b_color in (suggested-action, $selected_bg_color),
                             (destructive-action, $destructive_color) {
    &.#{$b_type} {
      @include button(normal, $b_color, white);

      &.flat {
        @include button(undecorated);

        color: $b_color; //FIXME: does it work on the dark variant?
      }

      &:hover { @include button(hover, $b_color, white); }

      &:active,
      &:checked { @include button(active, $b_color, white); }

      &:backdrop,
      &.flat:backdrop {
        @include button(backdrop, $b_color, white);

        &:active,
        &:checked { @include button(backdrop-active, $b_color, white); }

        &:disabled {
          @include button(backdrop-insensitive);

          &:active,
          &:checked { @include button(backdrop-insensitive-active, $b_color, white); }
        }
      }

      &.flat {
        &:backdrop, &:disabled, &:backdrop:disabled {
          @include button(undecorated);

          color: transparentize($b_color, 0.2);
        }
      }

      &:disabled {
        @include button(insensitive, $b_color, white);

        &:active,
        &:checked { @include button(insensitive-active, $b_color, white); }
      }

      .osd & {
        @include button(osd, $b_color);

        &:hover { @include button(osd-hover, $b_color); }

        &:active,
        &:checked { &:backdrop, & { @include button(osd-active, $b_color); }}

        &:disabled { &:backdrop, & { @include button(osd-insensitive, $b_color); }}

        &:backdrop { @include button(osd-backdrop, $b_color); }
      }
    }
  }

  .stack-switcher > & {
    // to position the needs attention dot, padding is added to the button
    // child, a label needs just lateral padding while an icon needs vertical
    // padding added too.

    outline-offset: -px(-3); // needs to be set or it gets overriden by GtkRadioButton outline-offset

    > label {
      padding-left: -px(6);  // label padding
      padding-right: -px(6); //
    }

    > image {
      padding-left: -px(6);   // image padding
      padding-right: -px(6);  //
      padding-top: -px(3);    //
      padding-bottom: -px(3); //
    }

    &.text-button {
      // compensate text-button paddings
      padding-left: -px(10);
      padding-right: -px(10);
    }

    &.image-button {
      // we want image buttons to have a 1:1 aspect ratio, so compensation
      // of the padding added to the GtkImage is needed
      padding-left: -px(2);
      padding-right: -px(2);
    }

    &.needs-attention {
      > label,
      > image { @extend %needs_attention; }

      &:active,
      &:checked {
        > label,
        > image {
          animation: none;
          background-image: none;
        }
      }
    }
  }

  //inline-toolbar buttons
  .inline-toolbar &, .inline-toolbar &:backdrop {
    border-radius: -px(2);
    border-width: -px(1);
    @extend %linked;
  }

  .primary-toolbar & { -gtk-icon-shadow: none; } // tango icons don't need shadows

  .linked > &,
  .linked > &:hover,
  .linked > &:active,
  .linked > &:checked,
  .linked > &:backdrop { @extend %linked; }

  .linked.vertical > &,
  .linked.vertical > &:hover,
  .linked.vertical > &:active,
  .linked.vertical > &:checked,
  .linked.vertical > &:backdrop { @extend %linked_vertical; }
}

%needs_attention {
  animation: needs_attention 150ms ease-in;
  $_dot_shadow: _text_shadow_color();
  $_dot_shadow_r: if($variant=='light',0.5,0.45);
  background-image: -gtk-gradient(radial,
                                  center center, 0,
                                  center center, 0.5,
                                  to($_dot_color),
                                  to(transparent)),
                    -gtk-gradient(radial,
                                  center center, 0,
                                  center center, $_dot_shadow_r,
                                  to($_dot_shadow),
                                  to(transparent));
  background-size: -px(6) -px(6), -px(6) -px(6);
  background-repeat: no-repeat;

  @if $variant == 'light' { background-position: right -px(3), right -px(4); }

  @else { background-position: right -px(3), right -px(2); }

  &:backdrop { background-size: -px(6) -px(6), 0 0;}

  &:dir(rtl) {
    @if $variant == 'light' { background-position: left -px(3), left -px(4); }

    @else { background-position: left -px(3), left -px(2); }
  }
}


// all the following is for the +|- buttons on inline toolbars, that way
// should really be deprecated...
.inline-toolbar toolbutton > button { // redefining the button look is
                                      // needed since those are flat...
  @include button(normal);

  &:hover { @include button(hover); }

  &:active,
  &:checked{ @include button(active); }

  &:disabled {
    @include button(insensitive);

    &:active,
    &:checked { @include button(insensitive-active); }
  }

  &:backdrop {
    @include button(backdrop);

    &:active,
    &:checked { @include button(backdrop-active); }

    &:disabled {
      @include button(backdrop-insensitive);

      &:active,
      &:checked { @include button(backdrop-insensitive-active); }
    }
  }
}

// More inline toolbar buttons
toolbar.inline-toolbar toolbutton,
toolbar.inline-toolbar toolbutton:backdrop {
  > button.flat { @extend %linked_middle; }

  &:first-child > button.flat { @extend %linked:first-child; }

  &:last-child > button.flat { @extend %linked:last-child; }

  &:only-child > button.flat { @extend %linked:only-child; }
}

%linked_middle {
  border-radius: 0;
  border-right-style: none;
}

%linked {
  @extend %linked_middle;

  &:first-child {
    border-top-left-radius: -px(3);
    border-bottom-left-radius: -px(3);
  }

  &:last-child {
    border-top-right-radius: -px(3);
    border-bottom-right-radius: -px(3);
    border-right-style: solid;
  }

  &:only-child {
    border-radius: -px(3);
    border-style: solid;
  }
}

%linked_vertical_middle {
  border-style: solid solid none solid;
  border-radius: 0;
}

%linked_vertical{
  @extend %linked_vertical_middle;

  &:first-child {
    border-top-left-radius: -px(3);
    border-top-right-radius: -px(3);
  }

  &:last-child {
    border-bottom-left-radius: -px(3);
    border-bottom-right-radius: -px(3);
    border-style: solid;
  }

  &:only-child {
    border-radius: -px(3);
    border-style: solid;
  }
}

%undecorated_button {
  background-color: transparent;
  background-image: none;
  border-color: transparent;
  box-shadow: inset 0 -px(1) transparentize(white, 1),
              0 -px(1) transparentize(white, 1);
  text-shadow: none;
  -gtk-icon-shadow: none;
}

/* menu buttons */
modelbutton.flat,
.menuitem.button.flat {
  min-height: -px(26);
  padding-left: -px(5);
  padding-right: -px(5);
  border-radius: -px(3);
  outline-offset: -px(-2);

  @extend %undecorated_button;

  &:hover { background-color: $popover_hover_color; }

  &:selected { @extend %selected_items; }

  &:backdrop,
  &:backdrop:hover { @extend %undecorated_button; }

  // FIXME: remove the following when the checks/radios rewrite lands
  check:last-child,
  radio:last-child { margin-left: -px(8); }

  check:first-child,
  radio:first-child { margin-right: -px(8); }
}

modelbutton.flat arrow {
  background: none;

  &:hover { background: none; }

  &.left { -gtk-icon-source: -gtk-icontheme("pan-start-symbolic"); }

  &.right { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic"); }
}

button.color {
  padding: -px(4);

  colorswatch:only-child {
    &, overlay { border-radius: 0; }

    @if $variant == 'light' {
      box-shadow: 0 -px(1) _text_shadow_color();

      &:disabled,
      &:backdrop,
      &:active,
      &:checked { colorswatch:only-child { box-shadow: none; }}
    }
  }
}


/*********
 * Links *
 *********/
*:link {
  color: $link_color;

  &:visited {
    color: $link_visited_color;

    *:selected & { color: mix($selected_fg_color, $selected_bg_color, 60%); }
  }

  &:hover {
    color: lighten($link_color,10%);

    *:selected & { color: mix($selected_fg_color, $selected_bg_color, 90%); }
  }

  &:active {
    color: $link_color;

    *:selected & { color: mix($selected_fg_color, $selected_bg_color, 80%); }
  }

  &:backdrop { &:backdrop:hover, &:backdrop:hover:selected, & { color: $selected_bg_color; }}

  @at-root %link_selected,
  &:selected,
  *:selected & { color: mix($selected_fg_color, $selected_bg_color, 80%); }
}

button:link,
button:visited {
  @extend %undecorated_button;

  @extend *:link;

  text-shadow: none;

  &:hover,
  &:active,
  &:checked {
    @extend %undecorated_button;

    text-shadow: none;
  }

  > label { text-decoration-line: underline; }
}


/*****************
 * GtkSpinButton *
 *****************/
spinbutton {
  &:not(.vertical) {
    // in this horizontal configuration, the whole spinbutton
    // behaves as the entry, so we extend the entry styling
    // and nuke the style on the internal entry
    @extend %entry;

    padding: 0;

    entry {
      min-width: -px(28);
      // reset all the other props since the spinbutton node is styled here
      margin: 0;
      background: none;
      background-color: transparent;
      border: none;
      border-radius: 0;
      box-shadow: none;
    }

    button {
      min-height: -px(16);
      margin: 0;
      padding-bottom: 0;
      padding-top: 0;
      color: mix($fg_color, $base_color, 90%);
      background-image: none;
      border-style: none none none solid;
      border-color: transparentize($borders_color, 0.7);
      border-radius: 0;
      box-shadow: none;

      &:dir(rtl) { border-style: none solid none none; }

      &:hover {
        color: $fg_color;
        background-color: $base_hover_color;
      }

      &:disabled {
        color: transparentize($insensitive_fg_color, 0.7);
        background-color: transparent;
      }

      &:active {
        background-color: transparentize(black, 0.9);
        box-shadow: inset 0 -px(2) -px(3) -px(-1) transparentize(black, 0.8);
      }

      &:backdrop {
        color: mix($backdrop_fg_color, $backdrop_base_color, 90%);
        background-color: transparent;
        border-color: transparentize($backdrop_borders_color, 0.7);
        transition: $backdrop_transition;
      }

      &:backdrop:disabled {
        color: transparentize($backdrop_insensitive_color,0.7);
        background-color: transparent;
        border-style: none none none solid; // It is needed or it gets overridden

        &:dir(rtl) { border-style: none solid none none; }
      }
    }
  }

  // OSD horizontal
  .osd &:not(.vertical) {
    button {
      @include button(undecorated);

      color: $osd_fg_color;
      border-style: none none none solid;
      border-color: transparentize($osd_borders_color, 0.3);
      border-radius: 0;
      box-shadow: none;
      -gtk-icon-shadow: 0 -px(1) black;

      &:dir(rtl) { border-style: none solid none none; }

      &:hover {
        @include button(undecorated);

        color: $osd_fg_color;
        border-color: transparentize(opacify($osd_borders_color, 1), 0.5);
        background-color: transparentize($osd_fg_color, 0.9);
        -gtk-icon-shadow: 0 -px(1) black;
        box-shadow: none;
      }

      &:backdrop {
        @include button(undecorated);

        color: $osd_fg_color;
        border-color: transparentize(opacify($osd_borders_color, 1), 0.5);
        -gtk-icon-shadow: none;
        box-shadow: none;
      }

      &:disabled {
        @include button(undecorated);

        color: $osd_insensitive_fg_color;
        border-color: transparentize(opacify($osd_borders_color, 1), 0.5);
        -gtk-icon-shadow: none;
        box-shadow: none;
      }

      &:dir(ltr):last-child { border-radius: 0 -px(3) -px(3) 0; }

      &:dir(rtl):first-child { border-radius: -px(3) 0 0 -px(3); }
    }
  }

  // Vertical
  &.vertical {
    // in the vertical configuration, we treat the spinbutton
    // as a box, and tweak the style of the entry in the middle
    // so that it's linked

    // FIXME: this should not be set at all, but otherwise it gets the wrong
    // color
    &:disabled { color: $insensitive_fg_color; }

    &:backdrop:disabled { color: $backdrop_insensitive_color; }

    &:drop(active) {
      border-color: transparent;
      box-shadow: none;
    }

    entry {
      min-height: -px(32);
      min-width: -px(32);
      padding: 0;
      border-radius: 0;
    }

    button {
      min-height: -px(32);
      min-width: -px(32);
      padding: 0;

      &.up { @extend %top_button; }

      &.down { @extend %bottom_button; }
    }

    %top_button {
      border-radius: -px(3) -px(3) 0 0;
      border-style: solid solid none solid;
    }

    %bottom_button {
      border-radius: 0 0 -px(3) -px(3);
      border-style: none solid solid solid;
    }
  }

  // OSD vertical
  .osd &.vertical button:first-child {
    @include button(osd);

    &:hover { @include button(osd-hover);}

    &:active { @include button(osd-active); }

    &:disabled { @include button(osd-insensitive); }

    &:backdrop { @include button(osd-backdrop); }
  }

  // Misc
  treeview &:not(.vertical) {
    min-height: 0;
    border-style: none;
    border-radius: 0;

    entry {
      min-height: 0;
      padding: -px(1) -px(2);
    }
  }
}


/**************
 * ComboBoxes *
 **************/
combobox {
  arrow {
    -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
    min-height: -px(16);
    min-width: -px(16);
  }

  &.linked {
    button:nth-child(2) {
      &:dir(ltr) { @extend %linked:last-child; }
      &:dir(rtl) { @extend %linked:first-child; }
    }
  }

  &:drop(active) { // FIXME: untested
    box-shadow: none;

    button.combo { @extend %button_basic:drop(active); }
  }
}

.linked > combobox > box > button.combo {
  // the combo is a composite widget so the way we do button linking doesn't
  // work, special case needed. See
  // https://bugzilla.gnome.org/show_bug.cgi?id=733979

  &:dir(ltr),
  &:dir(rtl) { @extend %linked_middle; } // specificity bump
}

.linked:not(.vertical) > combobox:first-child > box > button.combo { @extend %linked:first-child; }
.linked:not(.vertical) > combobox:last-child > box > button.combo { @extend %linked:last-child; }
.linked:not(.vertical) > combobox:only-child > box > button.combo { @extend %linked:only-child; }

.linked.vertical > combobox > box > button.combo { @extend %linked_vertical_middle; }
.linked.vertical > combobox:first-child > box > button.combo { @extend %linked_vertical:first-child;}
.linked.vertical > combobox:last-child > box > button.combo { @extend %linked_vertical:last-child; }
.linked.vertical > combobox:only-child > box > button.combo { @extend %linked_vertical:only-child; }


/************
 * Toolbars *
 ************/
%toolbar {
  -GtkWidget-window-dragging: true;
  padding: -px(4);
  background-color: $bg_color;
}

toolbar {
  @extend %toolbar;
  @include headerbar_fill;

  box-shadow: none;
  border-bottom:1px solid $borders_color;
  padding: -px(4) -px(3) -px(3) -px(4);

  // on OSD
  .osd & { background-color: transparent; }

  // stand-alone OSD toolbars
  &.osd {
    padding: -px(13);
    border: none;
    border-radius: -px(5);
    background-color: $osd_bg_color;

    &.left,
    &.right,
    &.top,
    &.bottom { border-radius: 0; } // positional classes for `attached` osd toolbars
  }

  // toolbar separators
  &.horizontal separator { margin: 0 -px(7) -px(1) -px(6); }
  &.vertical separator { margin: -px(6) -px(1) -px(7) 0; }

  &:not(.inline-toolbar):not(.osd) {
    switch,
    scale,
    entry,
    spinbutton,
    button {
      margin-right: -px(1);
      margin-bottom: -px(1);
    }
  }
}

//searchbar, location-bar & inline-toolbar
.inline-toolbar {
  @extend %toolbar;

  @extend %darkbar;

  padding: -px(3);
  border-width: 0 -px(1) -px(1);
  border-radius: 0  0 -px(5) -px(5);
}

searchbar,
.location-bar {
  @extend %toolbar;

  @extend %darkbar;

  border-width: 0 0 -px(1);
  padding: -px(3);
}

%darkbar {
  border-style: solid;
  border-color: $borders_color;
  $_bg: mix($bg_color, $borders_color, 70%);
  background-color: $_bg;

  &:backdrop {
    border-color: $backdrop_borders_color;
    background-color: $backdrop_dark_fill;
    box-shadow: none;
    transition: $backdrop_transition;
  }
}


/***************
 * Header bars *
 ***************/
%titlebar,
headerbar {
  padding: 0 -px(5);
  min-height: -px(38);
  border-width: 0 0 -px(1);
  border-style: solid;
  border-color: $borders_color;
  border-radius: 0;

  @include headerbar_fill;

  &:backdrop {
    border-color: $backdrop_borders_color;
    background-color: $bg_color;
    background-image: none;
    box-shadow: inset 0 -px(1) $top_hilight;

    transition: $backdrop_transition;
  }

  .title {
    font-weight: bold;
    padding-left: -px(12);
    padding-right: -px(12);
  }

  .subtitle {
    font-size: smaller;
    padding-left: -px(12);
    padding-right: -px(12);

    @extend .dim-label;
  }

  &.selection-mode {
    $_hc: mix($top_hilight,$selected_bg_color, 50%); // hilight color

    color: $selected_fg_color;
    text-shadow: none;
    border-color: $selected_borders_color;

    @include headerbar_fill($selected_bg_color, $_hc);

    &:backdrop {
      background-color: $selected_bg_color;
      background-image: none;
      box-shadow: inset 0 -px(1) mix($top_hilight, $selected_bg_color, 60%);
    }

    .subtitle:link { @extend *:link:selected;  }

    button {
      @include button(normal, $selected_bg_color, $selected_fg_color);

      &.flat { @include button(undecorated); }

      &:hover { @include button(hover, $selected_bg_color, $selected_fg_color); }

      &:active,
      &:checked { @include button(active, $selected_bg_color, $selected_fg_color); }

      &:backdrop {
        &.flat, & {
          @include button(backdrop, $selected_bg_color, $selected_fg_color);

          -gtk-icon-effect: none;
          border-color: $selected_borders_color;

          &:active,
          &:checked {
            @include button(backdrop-active, $selected_bg_color, $selected_fg_color);

            border-color: $selected_borders_color;
          }

          &:disabled {
            @include button(backdrop-insensitive, $selected_bg_color, $selected_fg_color);

            border-color: $selected_borders_color;

            &:active, &:checked {
              @include button(backdrop-insensitive-active, $selected_bg_color, $selected_fg_color);

              border-color: $selected_borders_color;
            }
          }
        }
      }

      &.flat { &:backdrop, &:disabled, &:backdrop:disabled { @include button(undecorated); }}

      &:disabled {
        @include button(insensitive, $selected_bg_color, $selected_fg_color);

        &:active,
        &:checked { @include button(insensitive-active, $selected_bg_color, $selected_fg_color); }
      }

      &.suggested-action {
        @include button(normal);
        color: $selected_fg_color;

        border-color: $selected_borders_color;

        &:hover {
          @include button(hover);

          border-color: $selected_borders_color;
        }

        &:active {
          @include button(active);

          border-color: $selected_borders_color;
        }

        &:disabled {
          @include button(insensitive);
          background-image: none;
          background: $bg_color;

          border-color: $selected_borders_color;
        }

        &:backdrop {
          @include button(backdrop);

          border-color: $selected_borders_color;
        }

        &:backdrop:disabled {
          @include button(backdrop-insensitive);

          border-color: $selected_borders_color;
        }
      }
    }

    .selection-menu {
      &:backdrop, & {
        border-color: transparentize($selected_bg_color, 1);
        background-color: transparentize($selected_bg_color, 1);
        background-image: none;
        box-shadow: none;
        padding-left: -px(10);
        padding-right: -px(10);

        GtkArrow { -GtkArrow-arrow-scaling: 1; }

        .arrow {
          -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
          color: transparentize($selected_fg_color,0.5);
          -gtk-icon-shadow: none;
        }
      }
    }
  }

  .tiled &,
  .maximized & { &:backdrop, & { border-radius: 0; }} // squared corners when the window is maximized or tiled

  &.default-decoration {
    padding: -px(4);
    min-height: -px(28);

    button.titlebutton {
      min-height: -px(26);
      min-width: -px(26);
      margin: 0;
      padding: 0;
    }
  }

  .solid-csd & {
    &:backdrop, & {
      &:dir(rtl), &:dir(ltr) { // specificity bump
        margin-left: -px(-1);
        margin-right: -px(-1);
        margin-top: -px(-1);
        border-radius: 0;
        box-shadow: none;
      }
    }
  }
}

headerbar {
  // add vertical margins to common widget on the headerbar to avoid them spanning the whole height
  entry,
  spinbutton,
  separator,
  button {
    margin-top: -px(3);
    margin-bottom: -px(3);
  }
  button.titlebutton image {
    min-width: -px(22);
    min-height: -px(22);
  }
  button:not(.image-button):not(.titlebutton) image {
    min-width: -px(28);
    min-height: -px(28);
  }
  button.image-button {
    min-width: -px(28);
    min-height: -px(28);
    padding-left: -px(2);
    padding-right: -px(2);
  }
  switch {
    margin-top: -px(9);
    margin-bottom: -px(9);
  }
  buttonbox { padding: -px(0); }
}

.background:not(.tiled):not(.maximized) .titlebar {
  &:backdrop, & {
    border-top-left-radius: -px(7);
    border-top-right-radius: -px(7);
  }
}

headerbar {
  window:not(.tiled):not(.maximized) separator:first-child + &, // tackles the paned container case
  window:not(.tiled):not(.maximized) &:first-child { &:backdrop, & { border-top-left-radius: -px(7); }}

  window:not(.tiled):not(.maximized) &:last-child { &:backdrop, & { border-top-right-radius: -px(7); }}
}

.titlebar:not(headerbar) {
  window.csd > & {
    // in csd we assume every titlebar is a headerbar so reset anything, this is needed for split toolbars cases
    padding: 0;
    background-color: transparent;
    background-image: none;
    border-style: none;
    border-color: transparent;
    box-shadow: none;
  }

  > separator { background-color: $borders_color; }

  @extend %titlebar;
}

// Fixes: https://github.com/shimmerproject/Greybird/issues/157
// workaround for ugly Ubuntu-related CSD patches
.background:not(.csd):not(.ssd):not(.solid-csd) headerbar {
  &, &:backdrop {
    &, &:not(:last-child) {
      border-radius: 0;
      border-top-color: transparent;
      box-shadow: none;
    }
  }
}

/************
 * Pathbars *
 ************/
.path-bar button {
  &.text-button, &.image-button, & {
    padding-left: -px(4);
    padding-right: -px(4);
  }

  &.text-button.image-button label {
    padding-left: 0;
    padding-right: 0;
  }

  &.text-button.image-button, & {
    label:last-child { padding-right: -px(8); }
    label:first-child { padding-left: -px(8); }
  }

  image {
    padding-left: -px(4);
    padding-right: -px(4);
  }

  &.slider-button {
    padding-left: 0;
    padding-right: 0;
  }
}

/**************
 * Tree Views *
 **************/
treeview.view {
  @at-root * {
    -GtkTreeView-horizontal-separator: 4;
    -GtkTreeView-grid-line-width: 1;
    -GtkTreeView-grid-line-pattern: '';
    -GtkTreeView-tree-line-width: 1;
    -GtkTreeView-tree-line-pattern: '';
    -GtkTreeView-expander-size: 16;
  }

  border-left-color: mix($fg_color, $base_color, 50%); // this is actually the tree lines color,
  border-top-color: $bg_color;                         // while this is the grid lines color, better then nothing

  rubberband { @extend rubberband; } // to avoid borders being overridden by the previously set props

  &:selected {
    &:focus, & {
      border-radius: 0;

      @extend %selected_items;
    }

    &:backdrop, & {
      border-left-color: mix($selected_fg_color, $selected_bg_color, 50%);
      border-top-color: transparentize($fg_color, 0.9); // doesn't work unfortunatelly
    }
  }

  &:disabled {
    color: $insensitive_fg_color;

    &:selected {
      color: mix($selected_fg_color, $selected_bg_color, 40%);
      &:backdrop { color: mix($backdrop_selected_fg_color, $selected_bg_color, 30%); }
    }

    &:backdrop { color: $backdrop_insensitive_color; }
  }

  &.separator {
    min-height: -px(2);
    color: $bg_color;

    &:backdrop { color: transparentize($bg_color, 0.9); }
  }

  &:backdrop {
    border-left-color: mix($backdrop_fg_color, $backdrop_bg_color, 50%);
    border-top: $backdrop_bg_color;
  }
  &:drop(active) {
    border-style: solid none;
    border-width: -px(1);
    border-color: $selected_borders_color;

    &.after { border-top-style: none; }

    &.before { border-bottom-style: none; }
  }

  &.expander {
    -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');

    &:dir(rtl) { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic-rtl'); }

    color: mix($fg_color, $base_color, 70%);

    &:hover { color: $fg_color; }

    &:selected {
      color: mix($selected_fg_color, $selected_bg_color, 70%);

      &:hover { color: $selected_fg_color; }

      &:backdrop { color: mix($backdrop_selected_fg_color, $selected_bg_color, 70%); }
    }

    &:checked { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }

    &:backdrop { color: mix($backdrop_fg_color, $backdrop_base_color, 70%); }
  }

  &.progressbar { // progress bar in treeviews
    @if $variant == light { color: $base_color; }

    border: -px(1) solid $selected_borders_color;
    border-radius: -px(4);
    background-color: $selected_bg_color;
    background-image: linear-gradient(to bottom,
                                      $selected_bg_color,
                                      darken($selected_bg_color, 10%));
    box-shadow: inset 0 -px(1) if($variant=='light', transparentize(white, 0.7),
                                                  transparentize(white, 0.85)),
                      0 -px(1) if($variant=='light', transparentize(black, 0.8),
                                                  transparentize(black, 0.9));

    &:selected {
      &:focus, & {
        border-radius: -px(4);

        @if $variant == 'light' {
          color: $selected_bg_color;
          box-shadow: none;
        }

        @else { box-shadow: inset 0 -px(1) transparentize(white, 0.95); }

        background-image: linear-gradient(to bottom,
                                          $base_color,
                                          darken($base_color, 10%));

        &:backdrop {
          @if $variant == 'light' {
            color: $selected_bg_color;
            border-color: $selected_borders_color; // otherwise it gets inherited by .view(?!?)
          }

          @else { border-color: $backdrop_base_color; }

          background-color: $backdrop_base_color;
        }
      }
    }

    &:backdrop {
      @if $variant == 'light' { color: $backdrop_base_color; }

      @else { border-color: $backdrop_base_color; }

      background-image: none;
      box-shadow: none;
    }
  }

  &.trough { // progress bar trough in treeviews
    background-color: transparentize($fg_color,0.9);
    border-radius: -px(4);

    &:selected {
      &:focus, & {
        background-color: if($variant == 'light',
                             transparentize($selected_fg_color, 0.7),
                             darken($selected_bg_color, 10%));
        border-radius: -px(4);

        @if $variant == 'light' {
          border-width: -px(1) 0;
          border-style: solid;
          border-color: $selected_bg_color;
        }
      }
    }
  }

  header {
    button {
      $_column_header_color: mix($fg_color, $base_color, 50%);

      @extend %column_header_button;

      color: $_column_header_color;
      background-color: $base_color;
      font-weight: bold;
      text-shadow: none;
      box-shadow: none;

      &:hover {
        @extend %column_header_button;

        color: mix($_column_header_color, $fg_color, 50%);
        box-shadow: none;
        transition: none; //I shouldn't need this
      }

      &:active {
        @extend %column_header_button;

        color: $fg_color;
        transition: none; //I shouldn't need this
      }
    }

    button:last-child { &:backdrop, & { border-right-style: none; }}
  }

  button.dnd,
  header.button.dnd { // for treeview-like derive widgets
    &:active, &:selected, &:hover, & {
      padding: 0 -px(6);
      transition: none;
      background-image: none;
      background-color: $selected_bg_color;
      color: $base_color;
      border-radius: 0;
      border-style: none;
      box-shadow: inset 0 0 0 -px(1) $base_color;
      text-shadow: none;
    }
  }

  acceleditor > label { background-color: $selected_bg_color; } // see tests/testaccel to test
}

%column_header_button {
  padding: 0 -px(6);
  border-radius: 0;
  background-image: none;
  text-shadow: none;
  border-style: none solid solid none;
  border-color: $bg_color;

  &:disabled {
    border-color: $bg_color;
    background-image: none;
  }

  &:backdrop {
    border-color: $backdrop_bg_color;
    border-style: none solid solid none;
    color: mix($backdrop_fg_color, $backdrop_bg_color, 50%);
    background-image: none;
    background-color: $backdrop_base_color;

    &:disabled {
      border-color: $backdrop_bg_color;
      background-image: none;
    }
  }
}


/*********
 * Menus *
 *********/
menubar,
.menubar {
  -GtkWidget-window-dragging: true;
  padding: -px(0);

  &:backdrop { background-color: $backdrop_bg_color; }

  > menuitem {
    min-height: -px(16);
    padding: -px(3) -px(8);
    border: -px(1) solid transparent;

    &:hover { //Seems like it :hover even with keyboard focus
      background-image: linear-gradient(to bottom,
                                        shade($selected_bg_color, 1.2),
                                        shade($selected_bg_color, 1.0)
                                        );
      color: $selected_fg_color;
      border-color: shade($selected_bg_color, 1.1);
    }

    &:disabled {
      color: $insensitive_fg_color;
      box-shadow: none;
    }
  }
}

menu,
.menu,
.context-menu {
  margin: -px(4);
  padding: -px(2) -px(0);
  background-color: $menu_color;
  border: -px(1) solid $borders_color; // adds borders in a non composited env

  .csd & { border: none; }  // axes borders in a composited env

  &:backdrop { background-color: $backdrop_menu_color; }

  menuitem {
    min-height: -px(16);
    min-width: -px(40);
    padding: -px(4) -px(6);
    text-shadow: none;

    &:hover {
      color: $selected_fg_color;
      background-image: linear-gradient(to bottom, shade($selected_bg_color, 1.2), shade($selected_bg_color, 1.0));
      box-shadow: inset -px(1) -px(1) shade($selected_bg_color, 0.8),
                  inset -px(-1) -px(-1) shade($selected_bg_color, 0.8);
    }

    &:disabled {
      color: $insensitive_fg_color;
      &:backdrop { color: $backdrop_insensitive_color; }
    }

    &:backdrop,
    &:backdrop:hover {
      color: $backdrop_fg_color;
      background-color: transparent;
    }

    // submenu indicators
    arrow {
      min-height: -px(16);
      min-width: -px(16);

      &:dir(ltr) {
        -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');
        margin-left: -px(10);
      }

      &:dir(rtl) {
        -gtk-icon-source:-gtk-icontheme('pan-end-symbolic-rtl');
        margin-right: -px(10);
      }
    }

    // avoids labels color being overridden, see
    // https://bugzilla.gnome.org/show_bug.cgi?id=767058
    label { &:dir(rtl), &:dir(ltr) { color: inherit; }}
  }

  // overflow arrows
  > arrow {
    @include button(undecorated);

    min-height: -px(16);
    min-width: -px(16);
    padding: -px(4);
    background-color: $menu_color;
    border-radius: 0;

    &.top {
      margin-top: -px(-6);
      border-bottom: -px(1) solid mix($fg_color, $base_color, 10%);
      -gtk-icon-source: -gtk-icontheme('pan-up-symbolic');
    }

    &.bottom {
      margin-bottom: -px(-6);
      border-top: -px(1) solid mix($fg_color, $base_color, 10%);
      -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
    }

    &:hover { background-color: mix($fg_color, $base_color, 10%); }

    &:backdrop { background-color: $backdrop_menu_color; }

    &:disabled {
      color: transparent;
      background-color: transparent;
      border-color: transparent ;
    }
  }
}

menuitem {
  accelerator { color: gtkalpha(currentColor,0.55); }

  check,
  radio {
    min-height: -px(16);
    min-width: -px(16);

    &:dir(ltr) { margin-right: -px(7); }
    &:dir(rtl) { margin-left: -px(7); }
  }
}

/***************
 * Popovers   *
 ***************/

popover.background {
  padding: -px(2);
  border-radius: -px(5);
  background-color: $popover_bg_color;

  modelbutton:hover { color: $selected_fg_color; }

  .csd &, & { border: -px(1) solid $borders_color; }

  box-shadow: 0 -px(1) -px(2) transparentize(black, 0.7);

  &:backdrop {
    background-color: $backdrop_bg_color;
    box-shadow: none;
  }

  > list,
  > .view,
  > toolbar {
    border-style: none;
    background-color: transparent;
  }

  .csd &, & {
    &.touch-selection,
    &.magnifier {
      @extend %osd;

      border: -px(1) solid transparentize(white, 0.9);

      button { @extend %osd_button };
    }

    &.osd { @extend %osd; }
  }

  separator { margin: -px(3); }

  list separator { margin: -px(0); }

  checkbutton,
  radiobutton { @extend modelbutton.flat; }
}

/*************
 * Notebooks *
 *************/
notebook {
  &.frame {
    border-style: none;

    > header { margin-left: 0; }

    > stack:not(:only-child) { // the :not(:only-child) is for "hidden" notebooks
      border: -px(1) solid shade($bg_color, 0.9);
    }
  }

  > header {
    padding: -px(1);
    background-color: $bg_color;

    &:backdrop {
      border-color: $backdrop_borders_color;
      background-color: $backdrop_bg_color;
    }

    tabs { margin: -px(-1); }

    &.top {
      > stack { border-top-style: none; }
      > tabs > tab {
        border-radius: -px(3) -px(3) 0 0;
        border: -px(1) solid shade($bg_color, 0.9);

        &:backdrop { box-shadow: none; }

        &:checked { border-width: -px(1) -px(1) 0 -px(1); }
      }
    }

    &.bottom {
      > stack { border-bottom-style: none; }
      > tabs > tab {
        border-radius: 0 0 -px(3) -px(3);

        &:backdrop { box-shadow: none; }

        &:checked { border-width: 0 -px(1) -px(1) -px(1); }
      }
    }

    &.left {
      > stack { border-left-style: none; }
      > tabs > tab {
        border-radius: -px(3) 0 0 -px(3);

        &:backdrop { box-shadow: none; }

        &:checked { border-width: -px(1) 0 -px(1) -px(1); }
      }
    }

    &.right {
      > stack { border-right-style: none; }
      > tabs > tab {
        border-radius: 0 -px(3) -px(3) 0;

        &:backdrop { box-shadow: none; }

        &:checked { border-width: -px(1) -px(1) -px(1) 0; }
      }
    }

    &.top > tabs > arrow {
      @extend %notebook_vert_arrows;

      border-top-style: none;
    }

    &.bottom > tabs > arrow {
      @extend %notebook_vert_arrows;

      border-bottom-style: none;
    }

    @at-root %notebook_vert_arrows {
      margin-left: -px(-5);
      margin-right: -px(-5);
      padding-left: -px(4);
      padding-right: -px(4);

      &.down { -gtk-icon-source: -gtk-icontheme('pan-start-symbolic'); }

      &.up { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic'); }
    }

    &.left > tabs > arrow {
      @extend %notebook_horz_arrows;

      border-left-style: none;
    }

    &.right > tabs > arrow {
      @extend %notebook_horz_arrows;

      border-right-style: none;
    }

    @at-root %notebook_horz_arrows {
      margin-top: -px(-5);
      margin-bottom: -px(-5);
      padding-top: -px(4);
      padding-bottom: -px(4);

      &.down { -gtk-icon-source: -gtk-icontheme('pan-up-symbolic'); }

      &.up { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }
    }

    > tabs > arrow {
      @extend %button_basic;

      @extend %button_basic.flat;

      min-height: -px(16);
      min-width: -px(16);
      border-radius: 0;

      &:hover:not(:active):not(:backdrop) {
        background-clip: padding-box;
        background-image: none;
        background-color: transparentize(white, 0.7);
        border-color: transparent;
        box-shadow: none;
      }

      &:disabled { @include button(undecorated); }
    }

    tab {
      min-height: -px(20);
      min-width: -px(24);
      padding: -px(3) -px(12);

      outline-offset: -px(-5);

      color: $insensitive_fg_color;
      background-color: $bg_color;

      border-width: -px(1);         // for reorderable tabs
      border-radius: -px(3);
      border-color: shade($bg_color, 0.9); //
      border-style: solid;

      &:hover {
        color: mix($insensitive_fg_color, $fg_color, 50%);

        &.reorderable-page {
          border-color: transparentize($borders_color, 0.7);
          background-color: transparentize($bg_color, 0.8);
        }
      }

      &:backdrop {
        color: mix($backdrop_fg_color, $backdrop_bg_color, 60%);

        &.reorderable-page {
          border-color: transparent;
          background-color: transparent;
        }
      }

      &:checked {
        color: $fg_color;
        background-color: shade($bg_color, 1.05);
        border-width: -px(1) -px(1) 0 -px(1);
        &:backdrop {
          background-color: $bg_color;
        }
        &.reorderable-page {
          border-color: transparentize($borders_color, 0.5);
          background-color: shade($bg_color, 1.05);
        }
      }

      &:backdrop:checked {
        color: $backdrop_fg_color;

        &.reorderable-page {
          border-color: $backdrop_borders_color;
          background-color: $backdrop_bg_color;
        }
      }

      // colors the button like the label, overridden otherwise
      button.flat {
        &:hover { color: currentColor; }

        &, &:backdrop { color: gtkalpha(currentColor, 0.3); }

        padding: 0;
        margin-top: -px(1);
        margin-bottom: -px(1);
        // FIXME: generalize .small-button?
        min-width: -px(16);
        min-height: -px(16);

        &:last-child {
          margin-left: -px(1);
          margin-right: -px(-1);
        }

        &:first-child {
          margin-left: -px(-1);
          margin-right: -px(1);
        }
      }
    }

    &.top,
    &.bottom {
      tabs {
        padding: 0;

        &:not(:only-child) {
          margin-left: -px(2);
          margin-right: -px(2);
        }
        &:first-child { margin-left: -px(-3); }
        &:last-child { margin-right: -px(-3); }

        tab {
          margin-left: -px(2);
          margin-right: -px(2);
        }
      }
    }

    &.left,
    &.right {
      tabs {
        padding: 0;

        &:not(:only-child) {
          margin-top: -px(2);
          margin-bottom: -px(2);
        }
        &:first-child { margin-top: -px(-3); }
        &:last-child { margin-bottom: -px(-3); }

        tab {
          margin-top: -px(2);
          margin-bottom: -px(2);
        }
      }
    }

    &.top tab { padding-bottom: -px(4); }
    &.bottom tab { padding-top: -px(4); }

    &.top > tabs {
      margin-bottom: -px(-2);
    }

    &.bottom > tabs {
      margin-top: -px(-2);
    }

    &.left > tabs {
      margin-right: -px(-2);
    }

    &.right > tabs {
      margin-left: -px(-2);
    }
  }

  // if the notebook property show_border is set to false, the frame directly inside the notebook
  // doesn't exist, so we define the tab margins, the background and backdrop colors here:

  > header {
    margin-left: -px(6);
  }

  > stack:not(:only-child) { // the :not(:only-child) is for "hidden" notebooks
    background-color: shade($bg_color, 1.05);
    border-width: -px(1);
    border-color: shade($bg_color, 0.9);
    border-style: solid;
    &:backdrop { background-color: $backdrop_bg_color; }
  }
}


/**************
 * Scrollbars *
 **************/
scrollbar {
  $_slider_min_length: -px(40);

  // disable steppers
  @at-root * {
    -GtkScrollbar-has-backward-stepper: false;
    -GtkScrollbar-has-forward-stepper: false;
  }

  background-image: linear-gradient(to right,
                                    lighten($bg_color, 10%),
                                    lighten($bg_color, 30%)
                                    );
  transition: 300ms $ease-out-quad;

  // scrollbar border
  &.top { border-bottom: -px(1) solid lighten($bg_color, 5%); }
  &.bottom { border-top: -px(1) solid lighten($bg_color, 5%); }
  &.left { border-right: -px(1) solid lighten($bg_color, 5%); }
  &.right { border-left: -px(1) solid lighten($bg_color, 5%); }

  &:backdrop {
    background-color: $backdrop_scrollbar_bg_color;
    border-color: lighten($bg_color, 5%);
    transition: $backdrop_transition;
  }

  // slider
  slider {
    min-width: -px(7);
    min-height: -px(7);
    margin: -px(3);
    border: -px(1) solid darken($bg_color, 30%);
    border-radius: -px(10);
    background-clip: padding-box;
    background-image: linear-gradient(to right,
                                      lighten($scrollbar_slider_color, 5%),
                                      lighten($scrollbar_slider_color, 1%));

    &:hover {
      background-image: linear-gradient(to right,
                                        darken($scrollbar_slider_color, 5%),
                                        darken($scrollbar_slider_color, 1%));
    }

    &:hover:active { background-color: $scrollbar_slider_active_color; }

    &:backdrop { background-color: $backdrop_scrollbar_slider_color; }

    &:disabled { background-color: transparent; }
  }

  &.fine-tune {
    slider {
      min-width: -px(4);
      min-height: -px(4);
    }

    &.horizontal slider { border-width: -px(5) -px(4); }
    &.vertical slider { border-width: -px(4) -px(5); }
  }

  &.overlay-indicator {
    &:not(.dragging):not(.hovering) {
      border-color: transparent;
      opacity: 0.4;
      background-color: transparent;

      slider {
        margin: 0;
        min-width: -px(6);
        min-height: -px(6);
        background-color: shade($fg_color, 0.9);
        background-image: none;
        border: -px(1) solid if($variant == 'light', white, black);
      }

      button {
        min-width: -px(5);
        min-height: -px(5);
        background-color: shade($fg_color, 0.9);
        background-image: none;
        background-clip: padding-box;
        border-radius: 100%;
        border: -px(1) solid if($variant == 'light', white, black);
        -gtk-icon-source: none;
      }

      &.horizontal {
        slider {
          margin: 0 -px(2);
          min-width: $_slider_min_length;
        }

        button {
          margin: -px(1) -px(2);
          min-width: -px(5);
        }
      }

      &.vertical {
        slider {
          margin: -px(2) 0;
          min-height: $_slider_min_length;
        }

        button {
          margin: -px(2) -px(1);
          min-height: -px(5);
        }
      }
    }

    &.dragging,
    &.hovering { opacity: 0.8; }
  }

  &.horizontal slider { min-width: $_slider_min_length; }

  &.vertical slider { min-height: $_slider_min_length; }

  // button styling
  button {
    padding: 0;
    min-width: -px(12);
    min-height: -px(12);
    border-style: none;
    border-radius: 0;
    transition-property: min-height, min-width, color;

    @include button(undecorated);

    color: $scrollbar_slider_color;

    &:hover {
      @include button(undecorated);

      color: $scrollbar_slider_hover_color;
    }
    &:active, &:checked {
      @include button(undecorated);

      color: $scrollbar_slider_active_color;
    }
    &:disabled {
      @include button(undecorated);

      color: transparentize($scrollbar_slider_color, 0.8);
    }
    &:backdrop {
      @include button(undecorated);

      color: $backdrop_scrollbar_slider_color;

      &:disabled {
        @include button(undecorated);

        color: transparentize($backdrop_scrollbar_slider_color, 0.8);
      }
    }
  }

  // button icons
  &.vertical {
    button {
      &.down { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }

      &.up { -gtk-icon-source: -gtk-icontheme('pan-up-symbolic'); }
    }
  }

  &.horizontal {
    button {
      &.down { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic'); }

      &.up { -gtk-icon-source: -gtk-icontheme('pan-start-symbolic'); }
    }
  }
}

treeview ~ scrollbar.vertical {
  border-top: -px(1) solid $borders_color;
  margin-top: -px(-1);
}

/**********
 * Switch *
 **********/
switch {
  font-size: 0;
  outline-offset: -px(-4);
  box-shadow: inset 0 -px(1) transparentize(black, 0.9), // needs to be set here
              _widget_edge(transparent);              // otherwise it gets
                                                      // clipped
  // similar to the .scale
  border: -px(1) solid gtkalpha(black, 0.25);
  border-radius: -px(10);
  background-color: mix($bg_color, $borders_color, 60%);
  text-shadow: 0 -px(1) transparentize(black, 0.9);
  min-height: -px(20);
  min-width: -px(20);
  transition: all 200ms ease-in;

  &:checked {
    box-shadow: inset 0 -px(1) transparentize(black, 0.9),
                _widget_edge(transparent);
    border-color: shade($selected_borders_color, 1.1);
    background-image: linear-gradient(to bottom,
                                      shade($selected_bg_color, 1.1),
                                      $selected_bg_color
                                      );
    text-shadow: 0 -px(1) transparentize($selected_borders_color, 0.5),
                 0 0 -px(2) transparentize(white, 0.4);
  }

  &:disabled {
    border-color: $borders_color;
    background-color: $insensitive_bg_color;
    box-shadow: _widget_edge(transparent);
    text-shadow: none;
  }

  &:backdrop {
    border-color: $backdrop_borders_color;
    background-color: $backdrop_dark_fill;
    box-shadow: none;
    text-shadow: none;
    transition: $backdrop_transition;

    &:checked {
      @if $variant == 'light' { color: $backdrop_bg_color; }
      border-color: transparentize($selected_borders_color, 0.3);
      background-color: transparentize($selected_bg_color, 0.3);
      background-image: none;
      box-shadow: none;
    }
  }

  &:disabled {
    border-color: $backdrop_borders_color;
    background-image: none;
    background-color: $insensitive_bg_color;
  }

  slider {
    margin: -px(-1);
    border: -px(1) solid gtkalpha(black, 0.2);
    border-radius: -px(10);
    min-width: -px(20);
    min-height: -px(20);
    transition: $button_transition;

    @include button(normal-alt, $edge: $shadow_color);
  }

  &:hover slider { @include button(hover-alt, $edge: $shadow_color); }

  &:checked slider { border: -px(1) solid gtkalpha($selected_borders_color, 0.8); }

  &:disabled slider { @include button(insensitive); }

  &:backdrop {
    slider {
      transition: $backdrop_transition;

      @include button(backdrop);
    }

    &:checked slider { border-color: transparentize($selected_borders_color, 0.3); }

    &:disabled slider { @include button(backdrop-insensitive); }
  }

  row:selected & {
    @if $variant == 'light' {
      box-shadow: none;
      border-color: $selected_borders_color;

      &:backdrop { border-color: $selected_borders_color; }

      &.slider:dir(rtl) { border-left-color: $borders_color; }
      &.slider:dir(ltr) { border-right-color: $borders_color; }

      &.slider { &:checked, & { border-color: $selected_borders_color; } }
    }
  }
}


/*************************
 * Check and Radio items *
 *************************/
// draw regular check and radio items using our PNG assets
// all assets are rendered from assets.svg. never add pngs directly


//selection-mode
@each $s,$as in ('','-selectionmode'),
                  (':hover', '-hover-selectionmode'),
                  (':active', '-active-selectionmode'),
                  (':backdrop', '-backdrop-selectionmode'),
                  (':checked', '-checked-selectionmode'),
                  (':checked:hover', '-checked-hover-selectionmode'),
                  (':checked:active', '-checked-active-selectionmode'),
                  (':backdrop:checked', '-checked-backdrop-selectionmode') {
  .view.content-view.check#{$s}:not(list) {
    -gtk-icon-shadow: none;
    -gtk-icon-source: -gtk-scaled(url("assets/checkbox#{$as}.png"),
                                  url("assets/checkbox#{$as}@2.png"));
    background-color: transparent;
  }
}

checkbutton.text-button, radiobutton.text-button {
  // this is for a nice focus on check and radios text
  padding: -px(2) 0;
  outline-offset: 0;

  label:not(:only-child) {
    &:first-child { margin-left: -px(4); }
    &:last-child { margin-right: -px(4); }
  }
}

check,
radio {
  margin: 0 -px(4);

  &:only-child { margin: 0; }

  min-height: -px(14);
  min-width: -px(14);
  border: -px(1) solid;
  -gtk-icon-source: none;

  @include button(normal-alt, $c:lighten($bg_color, 5%), $edge: $shadow_color);

  &:hover { @include button(hover-alt, $edge: $shadow_color); }
  &:active { @include button(active); }
  &:disabled { @include button(insensitive); }
  &:backdrop {
    @include button(backdrop);

    transition: $backdrop_transition;

    &:disabled { @include button(backdrop-insensitive); }
  }

  @if $variant == 'light' {
    // the borders of the light variant versions of checks and radios are too similar in luminosity to the selected background
    // color, hence we need special casing.
    row:selected & { border-color: $selected_borders_color; }
  }

  .osd & {
    @include button(osd);

    &:hover { @include button(osd); }
    &:active { @include button(osd-active); }
    &:backdrop { @include button(osd-backdrop); }
    &:disabled { @include button(osd-insensitive); }
  }

  menu menuitem & {
    margin: 0; // this is a workaround for a menu check/radio size allocation issue

    &, &:hover, &:disabled { //FIXME use button reset mixin
      min-height: -px(14);
      min-width: -px(14);
      background-image: none;
      background-color: transparent;
      box-shadow: none;
      -gtk-icon-shadow: none;
      color: inherit;
      border-color: currentColor;
      animation: none;
    }
  }
}

%check,
check {
  border-radius: -px(3);

  &:checked { -gtk-icon-source: image(-gtk-recolor(url("assets/check-symbolic.svg")),
                                      -gtk-recolor(url("assets/check-symbolic.symbolic.png"))); }

  &:indeterminate { -gtk-icon-source: image(-gtk-recolor(url("assets/dash-symbolic.svg")),
                                            -gtk-recolor(url("assets/dash-symbolic.symbolic.png"))); }
}

%radio,
radio {
  border-radius: 100%;

  &:checked { -gtk-icon-source: image(-gtk-recolor(url("assets/bullet-symbolic.svg")),
                                      -gtk-recolor(url("assets/bullet-symbolic.symbolic.png"))); }

  &:indeterminate { -gtk-icon-source: image(-gtk-recolor(url("assets/dash-symbolic.svg")),
                                            -gtk-recolor(url("assets/dash-symbolic.symbolic.png"))); }
}

// let's animate things
@keyframes check_check {
  from { -gtk-icon-transform: translate(6px, -px(-3)) rotate(-45deg) scaleY(0.2) rotate(45deg) scaleX(0); }
  to { -gtk-icon-transform: unset; }
}

@keyframes check_radio {
  from { -gtk-icon-transform: scale(0); }
  to { -gtk-icon-transform: unset; }
}

@keyframes check_indeterminate {
  from { -gtk-icon-transform: scale(0, 1); }
  to { -gtk-icon-transform: unset; }
}

check:not(:indeterminate):checked { animation: check_check 400ms; }

radio:not(:indeterminate):checked { animation: check_radio 400ms; }

check:indeterminate:checked, radio:indeterminate:checked { animation: check_indeterminate 400ms; }

// no animations in menus
menu menuitem {
  check:not(:indeterminate):checked,
  radio:not(:indeterminate):checked,
  check:indeterminate:checked:active,
  radio:indeterminate:checked { animation: none; }
}

treeview.view check,
treeview.view radio {
  &:selected {
    &:focus, & {
      color: $fg_color;

      @if $variant == 'light' { border-color: $selected_borders_color; }
    }

    &:disabled {
      color: $insensitive_fg_color;

      &:backdrop { color: $backdrop_insensitive_color; }
    }
  }

  &:backdrop { &:selected, & { color: $backdrop_fg_color; }}
}

treeview.view radio:selected { &:focus, & { @extend %radio; }} // This is a workaround


/************
 * GtkScale *
 ************/
%scale_trough {
  border: -px(1) solid $borders_color;
  border-radius: -px(3);
  background-color: $dark_fill;
  box-shadow: inset -px(1) -px(1) transparentize(black, 0.9);

  &:disabled {
    background-color: $insensitive_bg_color;
    box-shadow: none;
  }

  &:backdrop {
    background-color: $backdrop_dark_fill;
    border-color: $backdrop_borders_color;
    box-shadow: none;
    transition: $backdrop_transition;

    &:disabled { background-color: $insensitive_bg_color; }
  }

  // ...on selected list rows
  row:selected & {
    box-shadow: none;

    &, &:disabled { border-color: $selected_borders_color; }
  }

  // OSD
  .osd & {
    border-color: $osd_borders_color;
    background-color: transparentize($osd_borders_color, 0.2);
    box-shadow: none;
    outline-color: transparentize($osd_fg_color, 0.8);

    &:disabled { background-color: $osd_insensitive_bg_color; }
  }
}

%scale_highlight {
  border: -px(1) solid shade($selected_bg_color, 0.7);
  border-radius: -px(3);
  background-image: linear-gradient(to bottom,
                                    shade($selected_bg_color, 1.1),
                                    shade($selected_bg_color, 0.9)
                                    );

  &:disabled {
    background-color: transparent;
    border-color: transparent;
  }

  &:backdrop {
    border-color: transparentize($selected_borders_color, 0.3);
    background-color: transparentize($selected_bg_color, 0.3);
    background-image: none;
    &:disabled {
      background-color: transparent;
      border-color: transparent;
    }
  }

  // ...on selected list rows
  row:selected & { &:disabled, & { border-color: $selected_borders_color; } }

  // OSD
  .osd & {
    border-color: $osd_borders_color;

    &:disabled { border-color: transparent; }
  }
}

scale {
  // sizing
  $_marks_length: 6;
  $_marks_distance: 6;

  min-height: -px(10);
  min-width: -px(10);
  padding: -px(12);

  // those are inside the trough node, I need them to show their own border over the trough one, so negative margin
  fill,
  highlight { margin: -px(-2); }

  // the slider is inside the trough, so to have make it bigger there's a negative margin

  slider {
    min-height: -px(13);
    min-width: -px(13);
    margin: -px(-7);
  }

  // click-and-hold the slider to activate
  &.fine-tune {
    &.horizontal {
      padding-top: -px(9);
      padding-bottom: -px(9);
      min-height: -px(16);
    }

    &.vertical {
      padding-left: -px(9);
      padding-right: -px(9);
      min-width: -px(16);
    }

    // to make the trough grow in fine-tune mode
    slider { margin: -px(-6); }

    fill,
    highlight,
    trough {
      border-radius: -px(5);
      -gtk-outline-radius: -px(7);
    }
  }

  // the backing bit
  trough {
    @extend %scale_trough;

    padding: -px(1);
    outline-offset: -px(2);
    -gtk-outline-radius: -px(5);
  }

  // the colored part of the backing bit
  highlight { @extend %scale_highlight; }

  // this is another differently styled part of the backing bit, the most relevant use case is for example
  // in media player to indicate how much video stream has been cached
  fill {
    @extend %scale_trough;

    &, &:backdrop {
      background-color: $borders_color;
      box-shadow: none;
    }

    &:disabled {
      &, &:backdrop {
        border-color: transparent;
        background-color: transparent;
      }
    }

    // OSD
    .osd & {
      background-color: mix($osd_fg_color, $osd_borders_color, 25%);

      &:disabled {
        &, &:backdrop {
          border-color: transparent;
          background-color: transparent;
        }
      }
    }
  }

  slider {
    @include button(normal);

    background-image: linear-gradient(to bottom,
                                      shade($bg_color, 1.45),
                                      shade($bg_color, 1.15)
                                      );
    border: -px(1) solid darken($borders_color, 3%);
    border-radius: 100%;
    transition: $button_transition;
    transition-property: background, border, box-shadow;

    &:hover { @include button(hover-alt, $edge: $shadow_color); }

    &:active { border-color: $selected_borders_color; }

    &:disabled { @include button (insensitive); }

    &:backdrop {
      transition: $backdrop_transition;

      @include button(backdrop);

      &:disabled { @include button(backdrop-insensitive); }
    }

    // ...on selected list rows
    row:selected & { &, &:disabled { border-color: $selected_borders_color; } }

    // OSD
    .osd & {
      @include button(osd);
      border-color: darken($osd_borders_color, 3%);
      background-color: opacify($osd_bg_color, 1); // solid background needed here

      &:hover { @include button(osd-hover); }

      &:active { @include button(osd-active); }

      &:disabled { @include button(osd-insensitive); }

      &:backdrop {
        @include button(osd-backdrop);

        &:disabled { @include button(osd-backdrop-insensitive); }
      }
    }
  }

  value { color: gtkalpha(currentColor, 0.6); }

  marks {
    color: gtkalpha(currentColor, 0.4);

    @each $marks_class, $marks_pos, $marks_margin in (top, top, bottom),
                                                     (bottom, bottom, top),
                                                     (top, left, right),
                                                     (bottom, right, left) {
      &.#{$marks_class} {
        margin-#{$marks_margin}: $_marks_distance;
        margin-#{$marks_pos}: - -px($_marks_distance + $_marks_length);
      }
    }
  }
  &.fine-tune marks {
    @each $marks_class, $marks_pos, $marks_margin in (top, top, bottom),
                                                     (bottom, bottom, top),
                                                     (top, left, right),
                                                     (bottom, right, left) {
      &.#{$marks_class} {
        margin-#{$marks_margin}: -px($_marks_distance);
        margin-#{$marks_pos}: - -px($_marks_distance + $_marks_length - 3);
      }
    }
  }

  &.horizontal {
    indicator {
      min-height: -px($_marks_length);
      min-width: -px(1);
    }

    &.fine-tune indicator { min-height: -px($_marks_length - 3); }
  }

  &.vertical {
    indicator {
      min-height: -px(1);
      min-width: -px($_marks_length);
    }

    &.fine-tune indicator { min-width: -px($_marks_length - 3); }
  }

  &.color {
    min-height: 0;
    min-width: 0;

    trough {
      background-image: image($borders_color);
      background-repeat: no-repeat;
    }

    &.horizontal {
      padding: 0 0 -px(15) 0;

      trough {
        padding-bottom: -px(4);
        background-position: 0 -px(-3);
        border-top-left-radius: 0;
        border-top-right-radius: 0;
      }

      slider {
        &:dir(ltr), &:dir(rtl) { // specificity bumb
          &:hover, &:backdrop, &:disabled, &:backdrop:disabled, & {
            margin-bottom: -px(-15);
            margin-top: -px(6);
          }
        }
      }
    }

    &.vertical {
      &:dir(ltr) {
        padding: 0 0 0 -px(15);

        trough {
          padding-left: -px(4);
          background-position: -px(3) 0;
          border-bottom-right-radius: 0;
          border-top-right-radius: 0;
        }

        slider {
          &:hover, &:backdrop, &:disabled, &:backdrop:disabled, & {
            margin-left: -px(-15);
            margin-right: -px(6);
          }
        }
      }

      &:dir(rtl) {
        padding: 0 -px(15) 0 0;

        trough {
          padding-right: -px(4);
          background-position: -px(-3) 0;
          border-bottom-left-radius: 0;
          border-top-left-radius: 0;
        }

        slider {
          &:hover, &:backdrop, &:disabled, &:backdrop:disabled, & {
            margin-right: -px(-15);
            margin-left: -px(6);
          }
        }
      }
    }

    &.fine-tune {
      &.horizontal {
        &:dir(ltr), &:dir(rtl) { // specificity bump
          padding: 0 0 -px(12) 0;

          trough {
            padding-bottom: -px(7);
            background-position: 0 -px(-6);
          }

          slider {
            margin-bottom: -px(-15);
            margin-top: -px(6);
          }
        }
      }

      &.vertical {
        &:dir(ltr) {
          padding: 0 0 0 -px(12);

          trough {
            padding-left: -px(7);
            background-position: -px(6) 0;
          }

          slider {
            margin-left: -px(-15);
            margin-right: -px(6);
          }
        }

        &:dir(rtl) {
          padding: 0 -px(12) 0 0;

          trough {
            padding-right: -px(7);
            background-position: -px(-6) 0;
          }

          slider {
            margin-right: -px(-15);
            margin-left: -px(6);
          }
        }
      }
    }
  }
}


/*****************
 * Progress bars *
 *****************/
progressbar {
  // sizing
  &.horizontal {
    trough { min-height: -px(6); padding: -px(1) 0; }
    progress { min-height: -px(8); }
  }

  &.vertical {
    trough { min-width: -px(6); padding: 0 -px(1); }
    progress { min-width: -px(8); }
  }

  &.horizontal progress,
  &.vertical progress { margin: 0; }


  // FIXME: insensitive state missing and some other state should be set probably
  font-size: smaller;
  color: transparentize($fg_color, 0.6);

  &:backdrop {
    box-shadow: none;
    transition: $backdrop_transition;
  }

  trough { @extend %scale_trough; }

  &:backdrop trough { @extend %scale_trough:backdrop; } // looks like states are not passed to the trough component here

  progress {
    @extend %scale_highlight;
    border: -px(1) solid shade($selected_bg_color, 0.7);

    border-radius: -px(3);

    &.left {
      border-top-left-radius: -px(3);
      border-bottom-left-radius: -px(3);
    }

    &.right {
      border-top-right-radius: -px(3);
      border-bottom-right-radius: -px(3);
    }

    &.top {
      border-top-right-radius: -px(3);
      border-top-left-radius: -px(3);
    }

    &.bottom {
      border-bottom-right-radius: -px(3);
      border-bottom-left-radius: -px(3);
    }
  }

  &:backdrop progress { // states not passed here as well
    @extend %scale_highlight:backdrop;
    box-shadow: none;
  }

  &.osd { // progressbar.osd used for epiphany page loading progress
    min-width: -px(3);
    min-height: -px(3);
    background-color: transparent;

    trough {
      border-style: none;
      border-radius: 0;
      background-color: transparent;
      box-shadow: none;
    }

    progress {
      border-style: none;
      border-radius: 0;
    }
  }

  trough.empty progress { all: unset; } // makes the progress indicator disappear, when the fraction is 0
}


/*************
 * Level Bar *
 *************/
levelbar {
  block {
    min-width: -px(32);
    min-height: -px(1);
  }

  &.vertical block {
    min-width: -px(1);
    min-height: -px(32);
  }

  &:backdrop { transition: $backdrop_transition; }

  trough {
    border: -px(1) solid;
    padding: -px(2);
    border-radius: -px(3);
    @include entry(normal);

    &:backdrop { @include entry(backdrop); }
  }

  &.horizontal.discrete block { margin: 0 -px(1); }

  &.vertical.discrete block { margin: -px(1) 0; }

  block {
    border: -px(1) solid;
    border-radius: -px(1);
    box-shadow: 0 -px(1) transparentize(black, 0.8);

    &:backdrop { box-shadow: none; }

    &.low {
      border-color: if($variant == 'light', darken($warning_color, 20%), $warning_color);
      background-color: $warning_color;

      &:backdrop { border-color: $warning_color; };
    }

    &.high,
    &:not(.empty) {
      border-color: if($variant == 'light', darken($selected_bg_color, 20%), $selected_bg_color);
      background-color: $selected_bg_color;

      &:backdrop { border-color: $selected_bg_color; }
    }

    &.full {
      border-color: if($variant == 'light', darken($success_color, 20%), $success_color);
      background-color: $success_color;

      &:backdrop { border-color: $success_color; };
    }

    &.empty {
      background-color: transparent;
      border-color: if($variant == 'light', transparentize($fg_color,0.8), transparentize($fg_color,0.9));
      box-shadow: none;

      &:backdrop { border-color: transparentize($backdrop_fg_color,0.85); }
    }
  }
}


/****************
 * Print dialog *
*****************/
printdialog {
  paper {
    color: $fg_color;
    border: -px(1) solid $borders_color;
    background: white;
    padding: 0;

    &:backdrop {
      color: $backdrop_fg_color;
      border-color: $backdrop_borders_color;
    }
  }
  .dialog-vbox {
    background-color: $bg_color;
    &:backdrop { background-color: $backdrop_bg_color; }
  }

  .dialog-action-box { margin: -px(12); }
}


/**********
 * Frames *
 **********/
frame > border,
.frame {
  box-shadow: none;
  margin: 0;
  padding: 0;
  border-radius: 0;
  border: -px(1) solid $borders_color;

  &.flat { border-style: none; }

  &:backdrop { border-color: $backdrop_borders_color; }
}

actionbar > revealer >  box {
  padding: -px(6);
  border-top: -px(1) solid $borders_color;

  &:backdrop { border-color: $backdrop_borders_color; }
}

scrolledwindow {
  viewport.frame { // avoid double borders when viewport inside scrolled window
    border-style: none;
  }

  // This is used when content is touch-dragged past boundaries.
  // draws a box on top of the content, the size changes programmatically.
  overshoot {
    &.top {
      @include overshoot(top);

      &:backdrop { @include overshoot(top, backdrop); }
    }

    &.bottom {
      @include overshoot(bottom);

      &:backdrop { @include overshoot(bottom, backdrop); }
    }

    &.left {
      @include overshoot(left);

      &:backdrop { @include overshoot(left, backdrop); }
    }

    &.right {
      @include overshoot(right);

      &:backdrop { @include overshoot(right, backdrop); }
    }
  }

  // Overflow indication, works similarly to the overshoot, the size if fixed tho.
  undershoot {
    &.top { @include undershoot(top); }

    &.bottom { @include undershoot(bottom); }

    &.left { @include undershoot(left); }

    &.right { @include undershoot(right); }
  }

  junction { // the small square between two scrollbars
    border-color: transparent;
    // the border image is used to add the missing dot between the borders, details, details, details...
    border-image: linear-gradient(to bottom, $borders_color -px(1), transparent -px(1)) 0 0 0 1 / 0 -px(1) stretch;
    background-color: $scrollbar_bg_color;

    &:dir(rtl) { border-image-slice: 0 1 0 0; }

    &:backdrop {
      border-image-source: linear-gradient(to bottom, $backdrop_borders_color -px(1), transparent -px(1));
      background-color: $backdrop_scrollbar_bg_color;
      transition: $backdrop_transition;
    }
  }
}

//vbox and hbox separators
separator {
  background: transparentize(black, 0.9);
  min-width: -px(1);
  min-height: -px(1);
}


/*********
 * Lists *
 *********/
list {
  color: $text_color;
  background-color: $base_color;
  border-color: $borders_color;

  &:backdrop {
    background-color: $backdrop_base_color;
    border-color: $backdrop_borders_color;
  }

  row { padding: -px(2); }
}

row {
  transition: all 150ms $ease-out-quad;

  &:hover { transition: none; }

  &:backdrop { transition: $backdrop_transition; }

  &.activatable {
    &.has-open-popup, // this is for indicathing which row generated a popover see https://bugzilla.gnome.org/show_bug.cgi?id=754411

    &:hover { background-color: if(variant == light, transparentize($fg_color, 0.9), transparentize($fg_color, 0.95)); }

    &:active { box-shadow: inset 0 -px(2) -px(2) -px(-2) transparentize(black, 0.8); }

    &:backdrop:hover { background-color: transparent; }

    &:selected {
      &:active { box-shadow: inset 0 -px(2) -px(3) -px(-1) transparentize(black, 0.5); }

      &.has-open-popup,
      &:hover { background-color: mix($fg_color, $selected_bg_color, 10%); }

      &:backdrop { background-color: $selected_bg_color; }
    }
  }

  &:selected { @extend %selected_items; }
}


/*********************
 * App Notifications *
 *********************/
.app-notification,
.app-notification.frame {
  @extend %osd;

  padding: -px(10);
  border-radius: 0 0 -px(5) -px(5);
  background-color: $osd_bg_color;
  background-image: linear-gradient(to bottom, transparentize(black, 0.8),
                                               transparent -px(2));
  background-clip: padding-box;

  &:backdrop {
    background-image: none;
    transition: $backdrop_transition;
  }

  button {
    @extend %osd_button;
    background: transparentize(black, 0.9);
    &:hover { background: transparentize(black, 0.7); }
  }

  border { border: none; }
}


/*************
 * Expanders *
 *************/
expander {
  arrow {
    min-width: -px(16);
    min-height: -px(16);
    -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');

    &:dir(rtl) { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic-rtl'); }

    &:hover { color: lighten($fg_color,30%); } //only lightens the arrow

    &:checked { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }
  }
}


/************
 * Calendar *
 ***********/
calendar {
  color: $text_color;
  border: -px(1) solid $borders_color;
  padding: -px(2);

  &:selected {
    @extend %selected_items;

    border-radius: -px(6);
  }

  &.header {
    border: none;
    border-bottom: -px(1) solid transparentize(black, 0.9);
    border-radius: 0;

    &:backdrop { border-color: transparentize(black, 0.9); }
  }

  &.button {
    @extend %undecorated_button;

    color: transparentize($fg_color, 0.55);

    &:hover {
      @extend %undecorated_button;

      color: $fg_color;
    }

    &:backdrop {
      @extend %undecorated_button;

      color: transparentize($backdrop_fg_color,0.55);
    }

    &:disabled {
      @extend %undecorated_button;

      color: transparentize($insensitive_fg_color,0.55);
    }
  }

  // out-of-range days
  &:indeterminate,
  &:indeterminate:backdrop { color: gtkalpha(currentColor, 0.25); }

  // .day-name and .week-number
  &.highlight,
  &.highlight:backdrop {
    font-size: smaller;
    color: darken($selected_bg_color,0.75);
  }


  &:backdrop {
    color: $backdrop_text_color;
    border-color: $backdrop_borders_color;
  }
}


/***********
 * Dialogs *
 ***********/
messagedialog { // Message Dialog styling
  .titlebar {
    min-height: -px(20);
    background-image: none;
    background-color: $bg_color;
    border-style: none;
    border-top-left-radius: -px(7);
    border-top-right-radius: -px(7);
  }

  &.csd { // rounded bottom border styling for csd version
    &.background {
      // bigger radius for better antialiasing
      border-bottom-left-radius: -px(9);
      border-bottom-right-radius: -px(9);
    }

    buttonbox { padding: -px(0); }

    .dialog-action-area button {
      padding: -px(10) -px(14); // labels are not vertically centered on message dialog, this is a workaround
      border-radius: 0;
      border-left-style: solid;
      border-right-style: none;
      border-bottom-style: none;

      &:first-child{
        border-left-style: none;
        border-bottom-left-radius: -px(7);
        -gtk-outline-bottom-left-radius: -px(5);
      }

      &:last-child {
        border-bottom-right-radius: -px(7);
        -gtk-outline-bottom-right-radius: -px(5);
      }
    }
  }
}

filechooser {
  .dialog-action-box {
    border-top: -px(1) solid $borders_color;

    &:backdrop { border-top-color: $backdrop_borders_color; }
  }

  #pathbarbox {
    border-bottom: -px(1) solid $bg_color;
    stack { background-color: $bg_color; }
  }
}

filechooserbutton:drop(active) {
  box-shadow: none;
  border-color: transparent;
}


/***********
 * Sidebar *
 ***********/
.sidebar {
  border-style: none;
  background-color: $sidebar_bg_color;
  -gtk-icon-style: regular;

  row,
  treeview {
    border-top: -px(1) solid transparent;
    border-bottom: -px(1) solid transparent;
    &:selected, &:selected:focus {
      background-image: linear-gradient(to bottom,
                                        shade($sidebar_bg_color, 0.87),
                                        shade($sidebar_bg_color, 0.95) 10%,
                                        shade($sidebar_bg_color, 0.99) 92%,
                                        shade($sidebar_bg_color, 0.92)
                                        );
      border-top: -px(1) solid shade($bg_color, 0.85);
      border-bottom: -px(1) solid shade($bg_color, 1.12);

      label {
        color: $fg_color;
        &:backdrop { color: $backdrop_fg_color; }
      }
      &:backdrop {
        background-image: none;
        background-color: $bg_color;
        color: $fg_color;
        border-top: -px(1) solid shade($bg_color, 0.9);
        border-bottom: -px(1) solid shade($bg_color, 0.9);
      }
    }
    .view:selected, .view:selected:focus { color: $fg_color; }
    &:backdrop { background-color: transparent; }
  }
  @at-root %sidebar_left,
  &:dir(ltr),
  &.left,
  &.left:dir(rtl) {
    border-right: -px(1) solid $borders_color;
    border-left-style: none;
    border-top-style: none;
    border-bottom-style: none;
  }

  @at-root %sidebar_right
  &:dir(rtl),
  &.right {
    border-left: -px(1) solid $borders_color;
    border-right-style: none;
    border-top-style: none;
    border-bottom-style: none;
  }

  &:backdrop {
    background-color: $backdrop_sidebar_bg_color;
    border-color: $backdrop_borders_color;
    transition: $backdrop_transition;
  }

  list, treeview {
    background-color: transparent;
    &:backdrop {
      background-color: transparent;
    }
  }

  paned & { &.left, &.right, &.left:dir(rtl), &:dir(rtl), &:dir(ltr), & { border-style: none; } }
}

stacksidebar {
  &.sidebar {
    &:dir(ltr),
    &.left,
    &.left:dir(rtl) { list { @extend %sidebar_left; }}

    &:dir(rtl),
    &.right { list { @extend %sidebar_right; }}
  }

  row {
    padding: -px(10) -px(4);

    > label {
      padding-left: -px(6);
      padding-right: -px(6);
    }

    &.needs-attention > label {
      @extend %needs_attention;

      background-size: -px(6) -px(6), 0 0;
    }
  }
}


/****************
 * File chooser *
 ****************/
$_placesidebar_icons_opacity: 0.7;

placessidebar {
  > viewport.frame { border-style: none; }

  row {
    // Needs overriding of the GtkListBoxRow padding
    min-height: -px(24);
    padding: -px(0);

    // Using margins/padding directly in the SidebarRow
    // will make the animation of the new bookmark row jump
    > revealer { padding: 0 -px(14); }

    &:selected { color: $fg_color; }

    &:disabled { color: $insensitive_fg_color; }

    &:backdrop {
      color: $backdrop_fg_color;
      background-color: $backdrop_bg_color;

      &:selected { color: $backdrop_fg_color; }

      &:disabled { color: $backdrop_insensitive_color; }
    }

    image.sidebar-icon {
      &:dir(ltr) { padding-right: -px(8); }
      &:dir(rtl) { padding-left: -px(8); }
    }

    label.sidebar-label {
      &:dir(ltr) { padding-right: -px(2); }
      &:dir(rtl) { padding-left: -px(2); }
    }

    @at-root button.sidebar-button {
      @extend %button_basic.flat;

      @extend %button_selected.flat;

      min-height: -px(26);
      min-width: -px(26);
      margin-top: -px(3);
      margin-bottom: -px(3);
      padding: 0;
      border-radius: 100%;
      -gtk-outline-radius: 100%;

      &:not(:hover):not(:active),
      &:backdrop { > image { opacity: $_placesidebar_icons_opacity; }}
    }

    // in the sidebar case it makes no sense to click the selected row
    &:selected:active { box-shadow: none; }

    &.sidebar-placeholder-row {
      padding: 0 -px(8);
      min-height: -px(2);
      background-image: image($drop_target_color);
      background-clip: content-box;
    }

    &.sidebar-new-bookmark-row { color: $selected_bg_color; }

    &:drop(active):not(:disabled) {
      color: $drop_target_color;
      box-shadow: inset 0 -px(1) $drop_target_color,
                  inset 0 -px(-1) $drop_target_color;

      &:selected {
        color: $selected_fg_color;
        background-image: linear-gradient(to bottom,
                                          darken(mix(darken($base_color, 10%), lighten($selected_bg_color, 35%), 0.1), 13%),
                                          darken(mix(darken($base_color, 10%), lighten($selected_bg_color, 35%), 0.1), 5%) 10%,
                                          darken(mix(darken($base_color, 10%), lighten($selected_bg_color, 35%), 0.1), 1%) 92%,
                                          darken(mix(darken($base_color, 10%), lighten($selected_bg_color, 35%), 0.1), 8%)
                                          );
      }
    }
  }
}

placesview {
  .server-list-button > image {
    transition: 200ms $ease-out-quad;
    -gtk-icon-transform: rotate(0turn);
  }

  .server-list-button:checked > image {
    transition: 200ms $ease-out-quad;
    -gtk-icon-transform: rotate(-0.5turn);
  }

  row.activatable:hover { background-color: transparent; }

  // this selects the "connect to server" label
  > actionbar > revealer > box > label {
    padding-left: -px(8);
    padding-right: -px(8);
  }
}


/*********
 * Paned *
 *********/
paned {
  > separator {
    min-width: -px(1);
    min-height: -px(1);
    -gtk-icon-source: none; // defeats the ugly default handle decoration
    border-style: none; // just to be sure
    background-color: transparent;
    // workaround, using background istead of a border since the border will get rendered twice (?)
    background-image: image($borders_color);
    background-size: -px(1) -px(1);

    &:selected { background-image: image($selected_bg_color); } // FIXME is this needed?

    &:backdrop { background-image: image($backdrop_borders_color); }

    &.wide {
      min-width: -px(5);
      min-height: -px(5);
      background-color: $bg_color;
      background-image: image($borders_color), image($borders_color);
      background-size: -px(1) -px(1), -px(1) -px(1);

      &:backdrop {
        background-color: $backdrop_bg_color;
        background-image: image($backdrop_borders_color),
                          image($backdrop_borders_color);
      }
    }
  }

  &.horizontal > separator {
    background-repeat: repeat-y;

    &:dir(ltr) {
      margin: 0 -px(-8) 0 0;
      padding: 0 -px(8) 0 0;
      background-position: left;
    }
    &:dir(rtl) {
      margin: 0 0 0 -px(-8);
      padding: 0 0 0 -px(8);
      background-position: right;
    }

    &.wide {
      margin: 0;
      padding: 0;
      background-repeat: repeat-y, repeat-y;
      background-position: left, right;
    }
  }

  &.vertical > separator {
    margin: 0 0 -px(-8) 0;
    padding: 0 0 -px(8) 0;
    background-repeat: repeat-x;
    background-position: top;

    &.wide {
      margin: 0;
      padding: 0;
      background-repeat: repeat-x, repeat-x;
      background-position: bottom, top;
    }
  }
}


/**************
 * GtkInfoBar *
 **************/
infobar { border-style: none; }

.info,
.question,
.warning,
.error {
  &:backdrop, & {
    label, & { color: $selected_fg_color; }
    background-color: $selected_bg_color;
    border-color: darken($selected_bg_color, 10%);
  }

  text-shadow: 0 -px(1) darken($selected_bg_color, 10%);

  &:backdrop { text-shadow: none; }

  button {
    // FIXME: extend selection mode buttons
    @include button(normal, $selected_bg_color, $selected_fg_color, none);
    border-color: darken($selected_bg_color, 20%);

    &:hover { @include button(hover, $selected_bg_color, $selected_fg_color, none); }

    &:active,
    &:checked { @include button(active, $selected_bg_color, $selected_fg_color, none); }

    &:disabled { @include button(insensitive,$selected_bg_color,$selected_fg_color,none); }

    &:backdrop {
      @include button(backdrop, $selected_bg_color, $selected_fg_color, none);
      border-color: _border_color($selected_bg_color);

      &:disabled {
        @include button(backdrop-insensitive, $selected_bg_color,
                        $selected_fg_color, none);
        border-color: _border_color($selected_bg_color);
      }
    }
  }

  label:selected { &:focus, &:hover, & { background-color: darken($selected_bg_color, 10%); }}

  *:link { @extend %link_selected; }
}


/*************
 * Buttonbox *
 *************/
buttonbox {
  padding: -px(6);
}


/************
 * Tooltips *
 ************/
tooltip {
  &.background {
    // background-color needs to be set this way otherwise it gets drawn twice
    // see https://bugzilla.gnome.org/show_bug.cgi?id=736155 for details.
    background-color: transparentize(black, 0.2);
    background-clip: padding-box;
    border: -px(1) solid $tooltip_borders_color; // this suble border is meant to
                                              // not make the tooltip melt with
                                              // very dark backgrounds
  }

  padding: -px(1); /* not working */
  border-radius: -px(5);
  box-shadow: none; // otherwise it gets inherited by windowframe.csd
  text-shadow: 0 -px(1) black;

  // FIXME: we need a border or tooltips vanish on black background.
  decoration { background-color: transparent; }

  * { // Yeah this is ugly
    padding: -px(1);
    background-color: transparent;
    color: white;
  }
}


/*****************
 * Color Chooser *
 *****************/
colorswatch {
  // This widget is made of two boxes one on top of the other, the lower box is colorswatch {} the other one
  // is colorswatch overlay {}, colorswatch has the programmatically set background, so most of the style is
  // applied to the overlay box.

  &, &:drop(active) { border-style: none; } // FIXME: implement a proper drop(active) state

  $_colorswatch_radius: 5;
  $_colorswatch_overlay_shadow: if($variant == 'light', inset 0 -px(2) -px(2) -px(-3) transparentize(black, 0.3),
                                                        inset 0 -px(3) -px(2) -px(-2) transparentize(black, 0.5));

  // base color corners rounding
  // to avoid the artifacts caused by rounded corner anti-aliasing the base color
  // sports a bigger radius.
  // nth-child is needed by the custom color strip.

  &.top {
    border-top-left-radius: -px($_colorswatch_radius + 0.5);
    border-top-right-radius: -px($_colorswatch_radius + 0.5);

    overlay {
      border-top-left-radius: -px($_colorswatch_radius);
      border-top-right-radius: -px($_colorswatch_radius);
    }
  }

  &.bottom {
    border-bottom-left-radius: -px($_colorswatch_radius + 0.5);
    border-bottom-right-radius: -px($_colorswatch_radius + 0.5);

    overlay {
      border-bottom-left-radius: -px($_colorswatch_radius);
      border-bottom-right-radius: -px($_colorswatch_radius);
    }
  }

  &.left,
  &:first-child:not(.top) {
    border-top-left-radius: -px($_colorswatch_radius + 0.5);
    border-bottom-left-radius: -px($_colorswatch_radius + 0.5);

    overlay {
      border-top-left-radius: -px($_colorswatch_radius);
      border-bottom-left-radius: -px($_colorswatch_radius);
    }
  }

  &.right,
  &:last-child:not(.bottom) {
    border-top-right-radius: -px($_colorswatch_radius + 0.5);
    border-bottom-right-radius: -px($_colorswatch_radius + 0.5);

    overlay {
      border-top-right-radius: -px($_colorswatch_radius);
      border-bottom-right-radius: -px($_colorswatch_radius);
    }
  }

  &.dark overlay {
    color: $selected_fg_color;

    &:hover { border-color: if($variant == 'light', transparentize(black, 0.2), $borders_color); }

    &:backdrop { color: $backdrop_selected_fg_color; }
  }

  &.light overlay {
    color: $text_color;

    &:hover { border-color: if($variant == 'light', transparentize(black, 0.5), $borders_color); }

    &:backdrop { color: $backdrop_text_color; }
  }

  &:drop(active) {
    box-shadow: none;

    &.light overlay {
      border-color: $drop_target_color;
      box-shadow: inset 0 0 0 -px(2) if($variant == 'light', darken($drop_target_color, 7%), $borders_color),
                  inset 0 0 0 -px(1) $drop_target_color;
    }

    &.dark overlay {
      border-color: $drop_target_color;
      box-shadow: inset 0 0 0 -px(2) if($variant == 'light', transparentize(black, 0.7), $borders_color),
                  inset 0 0 0 -px(1) $drop_target_color;
    }
  }

  overlay {
    box-shadow: $_colorswatch_overlay_shadow;
    border: -px(1) solid if($variant == 'light', transparentize(black, 0.7), $borders_color);

    &:hover { box-shadow: inset 0 -px(1) transparentize(white, 0.7); }

    &:backdrop, &:backdrop:hover {
      border-color: if($variant == 'light', transparentize(black, 0.7), $borders_color);
      box-shadow: none;
    }
  }

  &#add-color-button {
    border-radius: -px($_colorswatch_radius) -px($_colorswatch_radius) 0 0;

    &:only-child { border-radius: -px($_colorswatch_radius); }

    overlay {
      @include button(normal);

      &:hover { @include button(hover); }

      &:backdrop { @include button(backdrop); }
    }
  }

  &:disabled {
    opacity: 0.5;

    overlay {
      border-color: transparentize(black, 0.4);
      box-shadow: none;
    }
  }

  row:selected & { box-shadow: 0 0 0 -px(2) $selected_fg_color; }

  &#editor-color-sample {
    border-radius: -px(4);

    overlay { border-radius: 4.5px; }
  }
}

// colorscale popup
colorchooser .popover.osd { border-radius: -px(5); }

/********
 * Misc *
 ********/
//content view (grid/list)
.content-view {
  background-color: darken($bg_color,7%);

  &:hover { -gtk-icon-effect: highlight; }

  &:backdrop { background-color: darken($bg_color,7%); }

  rubberband { @extend rubberband; }
}

.scale-popup {
  .osd & { @extend %osd; }

  .osd & button.flat {  //FIXME: quick hack, redo properly
    border-style: none;
    border-radius: -px(5);
  }

  button { // +/- buttons on GtkVolumeButton popup
    &:hover {
      @extend %undecorated_button;
      background-color: transparentize($fg_color,0.9);
      border-radius: -px(5);
    }

    &:backdrop { &:hover, &:disabled, & { @extend %undecorated_button; }}
  }
}


/**********************
 * Window Decorations *
 *********************/
decoration {
  border-radius: -px(7) -px(7) 0 0;
  // lamefun trick to get rounded borders regardless of CSD use
  border-width: -px(0);

  // this needs to be transparent
  // see bug #722563
  $_wm_border: if($variant=='light', transparentize(black, 0.77), transparentize($borders_color, 0.1));
  $_wm_border_backdrop: if($variant=='light', transparentize(black, 0.82), transparentize($borders_color, 0.1));

  box-shadow: 0 -px(3) -px(9) -px(1) transparentize(black, 0.5),
              0 0 0 -px(1) $_wm_border; //doing borders with box-shadow

  // FIXME rationalize shadows

  // this is used for the resize cursor area
  margin: -px(10);

  &:backdrop {
    // the transparent shadow here is to enforce that the shadow extents don't
    // change when we go to backdrop, to prevent jumping windows.
    // The biggest shadow should be in the same order then in the active state
    // or the jumping will happen during the transition.
    box-shadow: 0 -px(3) -px(9) -px(1) transparent,
                0 -px(2) -px(6) -px(2) transparentize(black, 0.8),
                0 0 0 -px(1) $_wm_border_backdrop;
    transition: $backdrop_transition;
  }

  .maximized &,
  .fullscreen &,
  .tiled & { border-radius: 0; }

  .popup & { box-shadow: none; }

  // server-side decorations as used by mutter
  .ssd & { box-shadow: 0 0 0 -px(1) $_wm_border; } //just doing borders, wm draws actual shadows

  .csd.popup & {
    border-radius: 0;
    box-shadow: 0 -px(1) -px(2) transparentize(black, 0.8),
                0 0 0 -px(1) transparentize($_wm_border,0.1);
  }

  tooltip.csd & {
    border-radius: -px(5);
    box-shadow: none;
  }

  messagedialog.csd & {
    border-radius: -px(7);
    box-shadow: 0 -px(1) -px(2) transparentize(black, 0.8),
                  0 0 0 -px(1) transparentize($_wm_border,0.1);
  }

  .solid-csd & {
    border-radius: 0;
    margin: -px(4);
    background-color: $backdrop_bg_color;
    border: solid -px(1) $backdrop_borders_color;
    box-shadow: none;
  }
}

// Window buttons
button.titlebutton {
  @extend %button_basic;

  @extend %button_basic.flat;

  @include _button_text_shadow;

  &.close, &.maximize, &.minimize {
    color: transparent;
    background-color: transparent;
    background-position: center;
    background-repeat: no-repeat;

    // fade the png buttons out on unfocused windows
    &:backdrop { opacity: 0.5; }
  }
  // Load png assets for each button
  @each $k in ('close','maximize', 'minimize') {
    @each $l, $m in ('',''), (':backdrop','-backdrop'), (':hover','-hover'), (':active','-active') {
      &.#{$k}#{$l} { background-image: -gtk-scaled(url('assets/titlebutton-#{$k}#{$m}#{$asset_suffix}.png'),
                                                   url('assets/titlebutton-#{$k}#{$m}#{$asset_suffix}@2.png')); }
    }
  }

  .selection-mode & {
    @extend %button.flat.suggested-action;

    @extend %nobg_selected_items;
  }

  &:backdrop { -gtk-icon-shadow: none; }
}

headerbar.selection-mode button.titlebutton,
.titlebar.selection-mode button.titlebutton {
  @include _button_text_shadow(white, $selected_bg_color);

  &:backdrop { -gtk-icon-shadow: none; }
}


// catch all extend :)

%selected_items {
  background-color: $selected_bg_color;

  @at-root %nobg_selected_items, & {
    color: $selected_fg_color;

    @if $variant == 'light' { outline-color: transparentize($selected_fg_color, 0.7); }

    &:disabled { color: mix($selected_fg_color, $selected_bg_color, 50%); }

    &:backdrop {
      color: $backdrop_selected_fg_color;

      &:disabled { color: mix($backdrop_selected_fg_color, $selected_bg_color, 30%); }
    }
  }
}

.monospace { font-family: monospace; }


/**********************
 * Touch Copy & Paste *
 *********************/
//touch selection handlebars for the Popover.osd above
cursor-handle {
  background-color: transparent;
  background-image: none;
  box-shadow: none;
  border-style: none;

  @each $s,$as in ('',''),
                  (':hover','-hover'),
                  (':active','-active') { //no need for insensitive and backdrop
    &.top#{$s}:dir(ltr), &.bottom#{$s}:dir(rtl) {
      $_url: 'assets/text-select-start#{$as}#{$asset_suffix}';
      -gtk-icon-source: -gtk-scaled(url('#{$_url}.png'),
                                    url('#{$_url}@2.png'));
      padding-left: -px(10);
    }

    &.bottom#{$s}:dir(ltr), &.top#{$s}:dir(rtl) {
      $_url: 'assets/text-select-end#{$as}#{$asset_suffix}';
      -gtk-icon-source: -gtk-scaled(url('#{$_url}.png'),
                                    url('#{$_url}@2.png'));
      padding-right: -px(10);
    }

    &.insertion-cursor#{$s}:dir(ltr), &.insertion-cursor#{$s}:dir(rtl) {
      $_url: 'assets/slider-horz-scale-has-marks-above#{$as}#{$asset_suffix}';
      -gtk-icon-source: -gtk-scaled(url('#{$_url}.png'),
                                    url('#{$_url}@2.png'));
    }
  }
}

.context-menu { font: initial; } // Decouple the font of context menus from their entry/textview

button.circular { // FIXME: aggregate to buttons
  border-radius: -px(9999);
  -gtk-outline-radius: -px(9999);

  label { padding: 0; }
}

// shortcut window keys
.keycap {
  min-width: -px(20);
  min-height: -px(25);
  margin-top: -px(2);
  padding-bottom: -px(3);
  padding-left: -px(6);
  padding-right: -px(6);

  color: $fg_color;
  background-color: $base_color;
  border: -px(1) solid;
  border-color: if($variant == 'light', mix($borders_color, $bg_color, 50%), $borders_color);
  border-radius: -px(5);
  box-shadow: if($variant == 'light', inset 0 -px(-3) mix($base_color, $bg_color, 20%), inset 0 -px(-3) mix($borders_color, $base_color, 60%));
  font-size: smaller;

  &:backdrop {
    background-color: $backdrop_base_color;
    color: $backdrop_fg_color;
    transition: $backdrop_transition;
  }
}

:not(decoration):not(window):drop(active):focus,
:not(decoration):not(window):drop(active) { // FIXME needs to be done widget by widget, this wildcard should really die
  border-color: $drop_target_color;
  box-shadow: inset 0 0 0 -px(1) $drop_target_color;
}

stackswitcher button.text-button { min-width: -px(100); } // FIXME aggregate with buttons

stackswitcher button.circular,
stackswitcher button.text-button.circular { // FIXME aggregate with buttons
  min-width: -px(32);
  min-height: -px(32);
  padding: 0;
}
